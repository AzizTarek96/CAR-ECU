
Node1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b3e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000156  00800060  00002b3e  00002bd2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  008001b6  008001b6  00002d28  2**0
                  ALLOC
  3 .stab         000030e4  00000000  00000000  00002d28  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015b4  00000000  00000000  00005e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000073c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00007560  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00007752  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00009b5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000aee3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000c0bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000c27c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000c572  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cee0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 ae 09 	jmp	0x135c	; 0x135c <__vector_5>
      18:	0c 94 6e 0a 	jmp	0x14dc	; 0x14dc <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 32 0a 	jmp	0x1464	; 0x1464 <__vector_10>
      2c:	0c 94 f0 09 	jmp	0x13e0	; 0x13e0 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e3       	ldi	r30, 0x3E	; 62
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3b       	cpi	r26, 0xB6	; 182
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 eb       	ldi	r26, 0xB6	; 182
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3c       	cpi	r26, 0xC6	; 198
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 71 13 	call	0x26e2	; 0x26e2 <main>
      8a:	0c 94 9d 15 	jmp	0x2b3a	; 0x2b3a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 66 15 	jmp	0x2acc	; 0x2acc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e9       	ldi	r26, 0x9D	; 157
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 82 15 	jmp	0x2b04	; 0x2b04 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 72 15 	jmp	0x2ae4	; 0x2ae4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8e 15 	jmp	0x2b1c	; 0x2b1c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 72 15 	jmp	0x2ae4	; 0x2ae4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8e 15 	jmp	0x2b1c	; 0x2b1c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 66 15 	jmp	0x2acc	; 0x2acc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d e9       	ldi	r24, 0x9D	; 157
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 82 15 	jmp	0x2b04	; 0x2b04 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6e 15 	jmp	0x2adc	; 0x2adc <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6d e9       	ldi	r22, 0x9D	; 157
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 8a 15 	jmp	0x2b14	; 0x2b14 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 72 15 	jmp	0x2ae4	; 0x2ae4 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 8e 15 	jmp	0x2b1c	; 0x2b1c <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 72 15 	jmp	0x2ae4	; 0x2ae4 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 8e 15 	jmp	0x2b1c	; 0x2b1c <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 72 15 	jmp	0x2ae4	; 0x2ae4 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 8e 15 	jmp	0x2b1c	; 0x2b1c <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 76 15 	jmp	0x2aec	; 0x2aec <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 92 15 	jmp	0x2b24	; 0x2b24 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 6e 15 	jmp	0x2adc	; 0x2adc <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 8a 15 	jmp	0x2b14	; 0x2b14 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	eb 55       	subi	r30, 0x5B	; 91
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <TIMER0_voidInt>:
static void (*TIMER2_pvCompMatchCallBackFunc)(void)=NULL;

static void (*ICU_pvCallBackFunc)(void)=NULL;

void TIMER0_voidInt(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0,TCCR0_WGM00);
     e36:	a3 e5       	ldi	r26, 0x53	; 83
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e3 e5       	ldi	r30, 0x53	; 83
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	8f 7b       	andi	r24, 0xBF	; 191
     e42:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_WGM01);
     e44:	a3 e5       	ldi	r26, 0x53	; 83
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e3 e5       	ldi	r30, 0x53	; 83
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	87 7f       	andi	r24, 0xF7	; 247
     e50:	8c 93       	st	X, r24

	//OCR0=TIMER0_u8COMP_MATCH_VAL;
	TCNT0 = TIMER0_u8PRELOAD_Val;
     e52:	e2 e5       	ldi	r30, 0x52	; 82
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	8d e5       	ldi	r24, 0x5D	; 93
     e58:	80 83       	st	Z, r24

	TCCR0 &=TIMER0_PRESCALER_MASK;
     e5a:	a3 e5       	ldi	r26, 0x53	; 83
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	e3 e5       	ldi	r30, 0x53	; 83
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	88 7f       	andi	r24, 0xF8	; 248
     e66:	8c 93       	st	X, r24
	TCCR0 |=TIMER0_u8PRESCALER;
     e68:	a3 e5       	ldi	r26, 0x53	; 83
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	e3 e5       	ldi	r30, 0x53	; 83
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	85 60       	ori	r24, 0x05	; 5
     e74:	8c 93       	st	X, r24

	//SET_BIT(TCCR0,TCCR0_COM01);
	//CLR_BIT(TCCR0,TCCR0_COM00);

	SET_BIT(TIMSK,TIMSK_TOIE0);
     e76:	a9 e5       	ldi	r26, 0x59	; 89
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	e9 e5       	ldi	r30, 0x59	; 89
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	81 60       	ori	r24, 0x01	; 1
     e82:	8c 93       	st	X, r24

}
     e84:	cf 91       	pop	r28
     e86:	df 91       	pop	r29
     e88:	08 95       	ret

00000e8a <TIMER0_u8OverflowSetCallBack>:

u8 TIMER0_u8OverflowSetCallBack(void (*Copy_pvCallBackFunc)(void))
{
     e8a:	df 93       	push	r29
     e8c:	cf 93       	push	r28
     e8e:	00 d0       	rcall	.+0      	; 0xe90 <TIMER0_u8OverflowSetCallBack+0x6>
     e90:	0f 92       	push	r0
     e92:	cd b7       	in	r28, 0x3d	; 61
     e94:	de b7       	in	r29, 0x3e	; 62
     e96:	9b 83       	std	Y+3, r25	; 0x03
     e98:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
     e9a:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pvCallBackFunc != NULL)
     e9c:	8a 81       	ldd	r24, Y+2	; 0x02
     e9e:	9b 81       	ldd	r25, Y+3	; 0x03
     ea0:	00 97       	sbiw	r24, 0x00	; 0
     ea2:	39 f0       	breq	.+14     	; 0xeb2 <TIMER0_u8OverflowSetCallBack+0x28>
	{
		TIMER0_pvOverflowCallBackFunc=Copy_pvCallBackFunc;
     ea4:	8a 81       	ldd	r24, Y+2	; 0x02
     ea6:	9b 81       	ldd	r25, Y+3	; 0x03
     ea8:	90 93 b7 01 	sts	0x01B7, r25
     eac:	80 93 b6 01 	sts	0x01B6, r24
     eb0:	02 c0       	rjmp	.+4      	; 0xeb6 <TIMER0_u8OverflowSetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState=NULL_POINTER;
     eb2:	82 e0       	ldi	r24, 0x02	; 2
     eb4:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
     eb6:	89 81       	ldd	r24, Y+1	; 0x01
}
     eb8:	0f 90       	pop	r0
     eba:	0f 90       	pop	r0
     ebc:	0f 90       	pop	r0
     ebe:	cf 91       	pop	r28
     ec0:	df 91       	pop	r29
     ec2:	08 95       	ret

00000ec4 <TIMER0_u8CompMatchSetCallBack>:

u8 TIMER0_u8CompMatchSetCallBack(void (*Copy_pvCallBackFunc)(void))
{
     ec4:	df 93       	push	r29
     ec6:	cf 93       	push	r28
     ec8:	00 d0       	rcall	.+0      	; 0xeca <TIMER0_u8CompMatchSetCallBack+0x6>
     eca:	0f 92       	push	r0
     ecc:	cd b7       	in	r28, 0x3d	; 61
     ece:	de b7       	in	r29, 0x3e	; 62
     ed0:	9b 83       	std	Y+3, r25	; 0x03
     ed2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
     ed4:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pvCallBackFunc != NULL)
     ed6:	8a 81       	ldd	r24, Y+2	; 0x02
     ed8:	9b 81       	ldd	r25, Y+3	; 0x03
     eda:	00 97       	sbiw	r24, 0x00	; 0
     edc:	39 f0       	breq	.+14     	; 0xeec <TIMER0_u8CompMatchSetCallBack+0x28>
	{
		TIMER0_pvCompMatchCallBackFunc=Copy_pvCallBackFunc;
     ede:	8a 81       	ldd	r24, Y+2	; 0x02
     ee0:	9b 81       	ldd	r25, Y+3	; 0x03
     ee2:	90 93 b9 01 	sts	0x01B9, r25
     ee6:	80 93 b8 01 	sts	0x01B8, r24
     eea:	02 c0       	rjmp	.+4      	; 0xef0 <TIMER0_u8CompMatchSetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState=NULL_POINTER;
     eec:	82 e0       	ldi	r24, 0x02	; 2
     eee:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
     ef0:	89 81       	ldd	r24, Y+1	; 0x01
}
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
     ef6:	0f 90       	pop	r0
     ef8:	cf 91       	pop	r28
     efa:	df 91       	pop	r29
     efc:	08 95       	ret

00000efe <TIMER0_voidSetPreload>:
void TIMER0_voidSetPreload(u8 Copy_u8Preload)
{
     efe:	df 93       	push	r29
     f00:	cf 93       	push	r28
     f02:	0f 92       	push	r0
     f04:	cd b7       	in	r28, 0x3d	; 61
     f06:	de b7       	in	r29, 0x3e	; 62
     f08:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Preload;
     f0a:	e2 e5       	ldi	r30, 0x52	; 82
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	89 81       	ldd	r24, Y+1	; 0x01
     f10:	80 83       	st	Z, r24
}
     f12:	0f 90       	pop	r0
     f14:	cf 91       	pop	r28
     f16:	df 91       	pop	r29
     f18:	08 95       	ret

00000f1a <TIMER0_voidStopTimer0>:
void TIMER0_voidStopTimer0(void)
{
     f1a:	df 93       	push	r29
     f1c:	cf 93       	push	r28
     f1e:	cd b7       	in	r28, 0x3d	; 61
     f20:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0;
     f22:	e3 e5       	ldi	r30, 0x53	; 83
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	10 82       	st	Z, r1
	TCNT0 = 0;
     f28:	e2 e5       	ldi	r30, 0x52	; 82
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	10 82       	st	Z, r1
}
     f2e:	cf 91       	pop	r28
     f30:	df 91       	pop	r29
     f32:	08 95       	ret

00000f34 <TIMER2_voidInt>:
void TIMER2_voidInt(void)
{
     f34:	df 93       	push	r29
     f36:	cf 93       	push	r28
     f38:	cd b7       	in	r28, 0x3d	; 61
     f3a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR2,TCCR2_WGM20);
     f3c:	a5 e4       	ldi	r26, 0x45	; 69
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	e5 e4       	ldi	r30, 0x45	; 69
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	8f 7b       	andi	r24, 0xBF	; 191
     f48:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,TCCR2_WGM21);
     f4a:	a5 e4       	ldi	r26, 0x45	; 69
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	e5 e4       	ldi	r30, 0x45	; 69
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	87 7f       	andi	r24, 0xF7	; 247
     f56:	8c 93       	st	X, r24

	//OCR2=TIMER2_u8COMP_MATCH_VAL;
	TCNT2 = TIMER2_u8PRELOAD_Val;
     f58:	e4 e4       	ldi	r30, 0x44	; 68
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	8d e5       	ldi	r24, 0x5D	; 93
     f5e:	80 83       	st	Z, r24

	TCCR2 &= TIMER2_PRESCALER_MASK;
     f60:	a5 e4       	ldi	r26, 0x45	; 69
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e5 e4       	ldi	r30, 0x45	; 69
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	88 7f       	andi	r24, 0xF8	; 248
     f6c:	8c 93       	st	X, r24
	TCCR2 |= TIMER2_u8PRESCALER;
     f6e:	a5 e4       	ldi	r26, 0x45	; 69
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e5 e4       	ldi	r30, 0x45	; 69
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	87 60       	ori	r24, 0x07	; 7
     f7a:	8c 93       	st	X, r24

	SET_BIT(TIMSK,TIMSK_TOIE2);
     f7c:	a9 e5       	ldi	r26, 0x59	; 89
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	e9 e5       	ldi	r30, 0x59	; 89
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	80 64       	ori	r24, 0x40	; 64
     f88:	8c 93       	st	X, r24

	//SET_BIT(TCCR2,TCCR2_COM21);
	//CLR_BIT(TCCR2,TCCR2_COM20);

}
     f8a:	cf 91       	pop	r28
     f8c:	df 91       	pop	r29
     f8e:	08 95       	ret

00000f90 <TIMER2_u8OverflowSetCallBack>:
u8 TIMER2_u8OverflowSetCallBack(void (*Copy_pvCallBackFunc)(void))
{
     f90:	df 93       	push	r29
     f92:	cf 93       	push	r28
     f94:	00 d0       	rcall	.+0      	; 0xf96 <TIMER2_u8OverflowSetCallBack+0x6>
     f96:	0f 92       	push	r0
     f98:	cd b7       	in	r28, 0x3d	; 61
     f9a:	de b7       	in	r29, 0x3e	; 62
     f9c:	9b 83       	std	Y+3, r25	; 0x03
     f9e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
     fa0:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pvCallBackFunc != NULL)
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	9b 81       	ldd	r25, Y+3	; 0x03
     fa6:	00 97       	sbiw	r24, 0x00	; 0
     fa8:	39 f0       	breq	.+14     	; 0xfb8 <TIMER2_u8OverflowSetCallBack+0x28>
	{
		TIMER2_pvOverflowCallBackFunc=Copy_pvCallBackFunc;
     faa:	8a 81       	ldd	r24, Y+2	; 0x02
     fac:	9b 81       	ldd	r25, Y+3	; 0x03
     fae:	90 93 bb 01 	sts	0x01BB, r25
     fb2:	80 93 ba 01 	sts	0x01BA, r24
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <TIMER2_u8OverflowSetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState=NULL_POINTER;
     fb8:	82 e0       	ldi	r24, 0x02	; 2
     fba:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
}
     fbe:	0f 90       	pop	r0
     fc0:	0f 90       	pop	r0
     fc2:	0f 90       	pop	r0
     fc4:	cf 91       	pop	r28
     fc6:	df 91       	pop	r29
     fc8:	08 95       	ret

00000fca <TIMER2_u8CompMatchSetCallBack>:

u8 TIMER2_u8CompMatchSetCallBack(void (*Copy_pvCallBackFunc)(void))
{
     fca:	df 93       	push	r29
     fcc:	cf 93       	push	r28
     fce:	00 d0       	rcall	.+0      	; 0xfd0 <TIMER2_u8CompMatchSetCallBack+0x6>
     fd0:	0f 92       	push	r0
     fd2:	cd b7       	in	r28, 0x3d	; 61
     fd4:	de b7       	in	r29, 0x3e	; 62
     fd6:	9b 83       	std	Y+3, r25	; 0x03
     fd8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
     fda:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pvCallBackFunc != NULL)
     fdc:	8a 81       	ldd	r24, Y+2	; 0x02
     fde:	9b 81       	ldd	r25, Y+3	; 0x03
     fe0:	00 97       	sbiw	r24, 0x00	; 0
     fe2:	39 f0       	breq	.+14     	; 0xff2 <TIMER2_u8CompMatchSetCallBack+0x28>
	{
		TIMER2_pvCompMatchCallBackFunc=Copy_pvCallBackFunc;
     fe4:	8a 81       	ldd	r24, Y+2	; 0x02
     fe6:	9b 81       	ldd	r25, Y+3	; 0x03
     fe8:	90 93 bd 01 	sts	0x01BD, r25
     fec:	80 93 bc 01 	sts	0x01BC, r24
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <TIMER2_u8CompMatchSetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState=NULL_POINTER;
     ff2:	82 e0       	ldi	r24, 0x02	; 2
     ff4:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     ff6:	89 81       	ldd	r24, Y+1	; 0x01
}
     ff8:	0f 90       	pop	r0
     ffa:	0f 90       	pop	r0
     ffc:	0f 90       	pop	r0
     ffe:	cf 91       	pop	r28
    1000:	df 91       	pop	r29
    1002:	08 95       	ret

00001004 <TIMER2_voidSetPreload>:
void TIMER2_voidSetPreload(u8 Copy_u8Preload)
{
    1004:	df 93       	push	r29
    1006:	cf 93       	push	r28
    1008:	0f 92       	push	r0
    100a:	cd b7       	in	r28, 0x3d	; 61
    100c:	de b7       	in	r29, 0x3e	; 62
    100e:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = Copy_u8Preload;
    1010:	e4 e4       	ldi	r30, 0x44	; 68
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	89 81       	ldd	r24, Y+1	; 0x01
    1016:	80 83       	st	Z, r24
}
    1018:	0f 90       	pop	r0
    101a:	cf 91       	pop	r28
    101c:	df 91       	pop	r29
    101e:	08 95       	ret

00001020 <TIMER2_voidStopTimer2>:
void TIMER2_voidStopTimer2(void)
{
    1020:	df 93       	push	r29
    1022:	cf 93       	push	r28
    1024:	cd b7       	in	r28, 0x3d	; 61
    1026:	de b7       	in	r29, 0x3e	; 62
	TCCR2 = 0;
    1028:	e5 e4       	ldi	r30, 0x45	; 69
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	10 82       	st	Z, r1
	TCNT2 = 0;
    102e:	e4 e4       	ldi	r30, 0x44	; 68
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	10 82       	st	Z, r1
}
    1034:	cf 91       	pop	r28
    1036:	df 91       	pop	r29
    1038:	08 95       	ret

0000103a <TIMER1_voidInt>:
void TIMER1_voidInt(void)
{
    103a:	df 93       	push	r29
    103c:	cf 93       	push	r28
    103e:	cd b7       	in	r28, 0x3d	; 61
    1040:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(TCCR1A,TCCR1A_COM1A1);
    1042:	af e4       	ldi	r26, 0x4F	; 79
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	ef e4       	ldi	r30, 0x4F	; 79
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	80 68       	ori	r24, 0x80	; 128
    104e:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    1050:	af e4       	ldi	r26, 0x4F	; 79
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	ef e4       	ldi	r30, 0x4F	; 79
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	8f 7b       	andi	r24, 0xBF	; 191
    105c:	8c 93       	st	X, r24

	CLR_BIT(TCCR1A,TCCR1A_WGM10);
    105e:	af e4       	ldi	r26, 0x4F	; 79
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	ef e4       	ldi	r30, 0x4F	; 79
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	8e 7f       	andi	r24, 0xFE	; 254
    106a:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_WGM11);
    106c:	af e4       	ldi	r26, 0x4F	; 79
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	ef e4       	ldi	r30, 0x4F	; 79
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	82 60       	ori	r24, 0x02	; 2
    1078:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM12);
    107a:	ae e4       	ldi	r26, 0x4E	; 78
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	ee e4       	ldi	r30, 0x4E	; 78
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	88 60       	ori	r24, 0x08	; 8
    1086:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM13);
    1088:	ae e4       	ldi	r26, 0x4E	; 78
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	ee e4       	ldi	r30, 0x4E	; 78
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	80 61       	ori	r24, 0x10	; 16
    1094:	8c 93       	st	X, r24

	ICR1  = 20000;
    1096:	e6 e4       	ldi	r30, 0x46	; 70
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 e2       	ldi	r24, 0x20	; 32
    109c:	9e e4       	ldi	r25, 0x4E	; 78
    109e:	91 83       	std	Z+1, r25	; 0x01
    10a0:	80 83       	st	Z, r24

	OCR1A = 0;
    10a2:	ea e4       	ldi	r30, 0x4A	; 74
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	11 82       	std	Z+1, r1	; 0x01
    10a8:	10 82       	st	Z, r1

	CLR_BIT(TCCR1B,TCCR1B_CS10);
    10aa:	ae e4       	ldi	r26, 0x4E	; 78
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	ee e4       	ldi	r30, 0x4E	; 78
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	8e 7f       	andi	r24, 0xFE	; 254
    10b6:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_CS11);
    10b8:	ae e4       	ldi	r26, 0x4E	; 78
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	ee e4       	ldi	r30, 0x4E	; 78
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	82 60       	ori	r24, 0x02	; 2
    10c4:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS12);
    10c6:	ae e4       	ldi	r26, 0x4E	; 78
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	ee e4       	ldi	r30, 0x4E	; 78
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	8b 7f       	andi	r24, 0xFB	; 251
    10d2:	8c 93       	st	X, r24
}
    10d4:	cf 91       	pop	r28
    10d6:	df 91       	pop	r29
    10d8:	08 95       	ret

000010da <TIMER1_voidStop>:
void TIMER1_voidStop(void)
{
    10da:	df 93       	push	r29
    10dc:	cf 93       	push	r28
    10de:	cd b7       	in	r28, 0x3d	; 61
    10e0:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    10e2:	ef e4       	ldi	r30, 0x4F	; 79
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	10 82       	st	Z, r1
	TCCR1B = 0 ;
    10e8:	ee e4       	ldi	r30, 0x4E	; 78
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	10 82       	st	Z, r1
	TCNT1 = 0;
    10ee:	ec e4       	ldi	r30, 0x4C	; 76
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	11 82       	std	Z+1, r1	; 0x01
    10f4:	10 82       	st	Z, r1
}
    10f6:	cf 91       	pop	r28
    10f8:	df 91       	pop	r29
    10fa:	08 95       	ret

000010fc <TIMER1_voidSetChannelACompValue>:
void TIMER1_voidSetChannelACompValue(u16 Copy_u16Value)
{
    10fc:	df 93       	push	r29
    10fe:	cf 93       	push	r28
    1100:	00 d0       	rcall	.+0      	; 0x1102 <TIMER1_voidSetChannelACompValue+0x6>
    1102:	cd b7       	in	r28, 0x3d	; 61
    1104:	de b7       	in	r29, 0x3e	; 62
    1106:	9a 83       	std	Y+2, r25	; 0x02
    1108:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=Copy_u16Value;
    110a:	ea e4       	ldi	r30, 0x4A	; 74
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	89 81       	ldd	r24, Y+1	; 0x01
    1110:	9a 81       	ldd	r25, Y+2	; 0x02
    1112:	91 83       	std	Z+1, r25	; 0x01
    1114:	80 83       	st	Z, r24
}
    1116:	0f 90       	pop	r0
    1118:	0f 90       	pop	r0
    111a:	cf 91       	pop	r28
    111c:	df 91       	pop	r29
    111e:	08 95       	ret

00001120 <TIMER1_u16GetCompValue>:
u16 TIMER1_u16GetCompValue()
{
    1120:	df 93       	push	r29
    1122:	cf 93       	push	r28
    1124:	cd b7       	in	r28, 0x3d	; 61
    1126:	de b7       	in	r29, 0x3e	; 62
	return OCR1A;
    1128:	ea e4       	ldi	r30, 0x4A	; 74
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	91 81       	ldd	r25, Z+1	; 0x01
}
    1130:	cf 91       	pop	r28
    1132:	df 91       	pop	r29
    1134:	08 95       	ret

00001136 <TIMER1_voidSetPreloadValue>:
void TIMER1_voidSetPreloadValue(u16 Copy_u16Value)
{
    1136:	df 93       	push	r29
    1138:	cf 93       	push	r28
    113a:	00 d0       	rcall	.+0      	; 0x113c <TIMER1_voidSetPreloadValue+0x6>
    113c:	cd b7       	in	r28, 0x3d	; 61
    113e:	de b7       	in	r29, 0x3e	; 62
    1140:	9a 83       	std	Y+2, r25	; 0x02
    1142:	89 83       	std	Y+1, r24	; 0x01
	TCNT1=Copy_u16Value;
    1144:	ec e4       	ldi	r30, 0x4C	; 76
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	9a 81       	ldd	r25, Y+2	; 0x02
    114c:	91 83       	std	Z+1, r25	; 0x01
    114e:	80 83       	st	Z, r24
}
    1150:	0f 90       	pop	r0
    1152:	0f 90       	pop	r0
    1154:	cf 91       	pop	r28
    1156:	df 91       	pop	r29
    1158:	08 95       	ret

0000115a <TIMER1_Readu16TimerValue>:
u16 TIMER1_Readu16TimerValue(void)
{
    115a:	df 93       	push	r29
    115c:	cf 93       	push	r28
    115e:	cd b7       	in	r28, 0x3d	; 61
    1160:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
    1162:	ec e4       	ldi	r30, 0x4C	; 76
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	91 81       	ldd	r25, Z+1	; 0x01
}
    116a:	cf 91       	pop	r28
    116c:	df 91       	pop	r29
    116e:	08 95       	ret

00001170 <ICU_voidInit>:
void ICU_voidInit(void)
{
    1170:	df 93       	push	r29
    1172:	cf 93       	push	r28
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1178:	af e4       	ldi	r26, 0x4F	; 79
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	ef e4       	ldi	r30, 0x4F	; 79
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	8e 7f       	andi	r24, 0xFE	; 254
    1184:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,TCCR1A_WGM11);
    1186:	af e4       	ldi	r26, 0x4F	; 79
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	ef e4       	ldi	r30, 0x4F	; 79
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	8d 7f       	andi	r24, 0xFD	; 253
    1192:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_WGM12);
    1194:	ae e4       	ldi	r26, 0x4E	; 78
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	ee e4       	ldi	r30, 0x4E	; 78
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	87 7f       	andi	r24, 0xF7	; 247
    11a0:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_WGM13);
    11a2:	ae e4       	ldi	r26, 0x4E	; 78
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	ee e4       	ldi	r30, 0x4E	; 78
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	8f 7e       	andi	r24, 0xEF	; 239
    11ae:	8c 93       	st	X, r24

	CLR_BIT(TCCR1B,TCCR1B_CS10);
    11b0:	ae e4       	ldi	r26, 0x4E	; 78
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	ee e4       	ldi	r30, 0x4E	; 78
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	8e 7f       	andi	r24, 0xFE	; 254
    11bc:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_CS11);
    11be:	ae e4       	ldi	r26, 0x4E	; 78
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	ee e4       	ldi	r30, 0x4E	; 78
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	82 60       	ori	r24, 0x02	; 2
    11ca:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS12);
    11cc:	ae e4       	ldi	r26, 0x4E	; 78
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	ee e4       	ldi	r30, 0x4E	; 78
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	8b 7f       	andi	r24, 0xFB	; 251
    11d8:	8c 93       	st	X, r24

	SET_BIT(TCCR1B,TCCR1B_ICES1);
    11da:	ae e4       	ldi	r26, 0x4E	; 78
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	ee e4       	ldi	r30, 0x4E	; 78
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	80 64       	ori	r24, 0x40	; 64
    11e6:	8c 93       	st	X, r24
	TCNT1 = 0;
    11e8:	ec e4       	ldi	r30, 0x4C	; 76
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	11 82       	std	Z+1, r1	; 0x01
    11ee:	10 82       	st	Z, r1
	ICR1 = 0;
    11f0:	e6 e4       	ldi	r30, 0x46	; 70
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	11 82       	std	Z+1, r1	; 0x01
    11f6:	10 82       	st	Z, r1

	SET_BIT(TIMSK,TIMSK_TICIE1);
    11f8:	a9 e5       	ldi	r26, 0x59	; 89
    11fa:	b0 e0       	ldi	r27, 0x00	; 0
    11fc:	e9 e5       	ldi	r30, 0x59	; 89
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	80 62       	ori	r24, 0x20	; 32
    1204:	8c 93       	st	X, r24

}
    1206:	cf 91       	pop	r28
    1208:	df 91       	pop	r29
    120a:	08 95       	ret

0000120c <ICU_u8SetCallBack>:
u8 ICU_u8SetCallBack(void(*Copy_pvCallBackFunc)(void))
{
    120c:	df 93       	push	r29
    120e:	cf 93       	push	r28
    1210:	00 d0       	rcall	.+0      	; 0x1212 <ICU_u8SetCallBack+0x6>
    1212:	0f 92       	push	r0
    1214:	cd b7       	in	r28, 0x3d	; 61
    1216:	de b7       	in	r29, 0x3e	; 62
    1218:	9b 83       	std	Y+3, r25	; 0x03
    121a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    121c:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pvCallBackFunc != NULL)
    121e:	8a 81       	ldd	r24, Y+2	; 0x02
    1220:	9b 81       	ldd	r25, Y+3	; 0x03
    1222:	00 97       	sbiw	r24, 0x00	; 0
    1224:	39 f0       	breq	.+14     	; 0x1234 <ICU_u8SetCallBack+0x28>
	{
		ICU_pvCallBackFunc = Copy_pvCallBackFunc;
    1226:	8a 81       	ldd	r24, Y+2	; 0x02
    1228:	9b 81       	ldd	r25, Y+3	; 0x03
    122a:	90 93 bf 01 	sts	0x01BF, r25
    122e:	80 93 be 01 	sts	0x01BE, r24
    1232:	02 c0       	rjmp	.+4      	; 0x1238 <ICU_u8SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState=NULL_POINTER;
    1234:	82 e0       	ldi	r24, 0x02	; 2
    1236:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1238:	89 81       	ldd	r24, Y+1	; 0x01
}
    123a:	0f 90       	pop	r0
    123c:	0f 90       	pop	r0
    123e:	0f 90       	pop	r0
    1240:	cf 91       	pop	r28
    1242:	df 91       	pop	r29
    1244:	08 95       	ret

00001246 <ICU_u8SetTrigger>:
u8 ICU_u8SetTrigger(u8 Copy_u8TriggerSource)
{
    1246:	df 93       	push	r29
    1248:	cf 93       	push	r28
    124a:	00 d0       	rcall	.+0      	; 0x124c <ICU_u8SetTrigger+0x6>
    124c:	00 d0       	rcall	.+0      	; 0x124e <ICU_u8SetTrigger+0x8>
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62
    1252:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    1254:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8TriggerSource)
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	3c 83       	std	Y+4, r19	; 0x04
    125e:	2b 83       	std	Y+3, r18	; 0x03
    1260:	8b 81       	ldd	r24, Y+3	; 0x03
    1262:	9c 81       	ldd	r25, Y+4	; 0x04
    1264:	00 97       	sbiw	r24, 0x00	; 0
    1266:	31 f0       	breq	.+12     	; 0x1274 <ICU_u8SetTrigger+0x2e>
    1268:	2b 81       	ldd	r18, Y+3	; 0x03
    126a:	3c 81       	ldd	r19, Y+4	; 0x04
    126c:	21 30       	cpi	r18, 0x01	; 1
    126e:	31 05       	cpc	r19, r1
    1270:	49 f0       	breq	.+18     	; 0x1284 <ICU_u8SetTrigger+0x3e>
    1272:	10 c0       	rjmp	.+32     	; 0x1294 <ICU_u8SetTrigger+0x4e>
	{

	case FALLING_EDGE : CLR_BIT(TCCR1B,TCCR1B_ICES1); break;
    1274:	ae e4       	ldi	r26, 0x4E	; 78
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	ee e4       	ldi	r30, 0x4E	; 78
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	8f 7b       	andi	r24, 0xBF	; 191
    1280:	8c 93       	st	X, r24
    1282:	0a c0       	rjmp	.+20     	; 0x1298 <ICU_u8SetTrigger+0x52>
	case RISING_EDGE  : SET_BIT(TCCR1B,TCCR1B_ICES1); break;
    1284:	ae e4       	ldi	r26, 0x4E	; 78
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	ee e4       	ldi	r30, 0x4E	; 78
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	80 64       	ori	r24, 0x40	; 64
    1290:	8c 93       	st	X, r24
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <ICU_u8SetTrigger+0x52>
	default : Local_u8ErrorState = NOK; break;
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1298:	89 81       	ldd	r24, Y+1	; 0x01
}
    129a:	0f 90       	pop	r0
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
    12a0:	0f 90       	pop	r0
    12a2:	cf 91       	pop	r28
    12a4:	df 91       	pop	r29
    12a6:	08 95       	ret

000012a8 <ICU_u16ReadInputCapture>:
u16 ICU_u16ReadInputCapture(void)
{
    12a8:	df 93       	push	r29
    12aa:	cf 93       	push	r28
    12ac:	cd b7       	in	r28, 0x3d	; 61
    12ae:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    12b0:	e6 e4       	ldi	r30, 0x46	; 70
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	91 81       	ldd	r25, Z+1	; 0x01
}
    12b8:	cf 91       	pop	r28
    12ba:	df 91       	pop	r29
    12bc:	08 95       	ret

000012be <ICU_voidInterruptDisable>:
void ICU_voidInterruptDisable(void)
{
    12be:	df 93       	push	r29
    12c0:	cf 93       	push	r28
    12c2:	cd b7       	in	r28, 0x3d	; 61
    12c4:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    12c6:	a9 e5       	ldi	r26, 0x59	; 89
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	e9 e5       	ldi	r30, 0x59	; 89
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	8f 7d       	andi	r24, 0xDF	; 223
    12d2:	8c 93       	st	X, r24
}
    12d4:	cf 91       	pop	r28
    12d6:	df 91       	pop	r29
    12d8:	08 95       	ret

000012da <WDT_voidEnable>:

void WDT_voidEnable(void)
{
    12da:	df 93       	push	r29
    12dc:	cf 93       	push	r28
    12de:	cd b7       	in	r28, 0x3d	; 61
    12e0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDTCR,WDTCR_WDE);
    12e2:	a1 e4       	ldi	r26, 0x41	; 65
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	e1 e4       	ldi	r30, 0x41	; 65
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	88 60       	ori	r24, 0x08	; 8
    12ee:	8c 93       	st	X, r24
}
    12f0:	cf 91       	pop	r28
    12f2:	df 91       	pop	r29
    12f4:	08 95       	ret

000012f6 <WDT_voidDisable>:

void WDT_voidDisable(void)
{
    12f6:	df 93       	push	r29
    12f8:	cf 93       	push	r28
    12fa:	cd b7       	in	r28, 0x3d	; 61
    12fc:	de b7       	in	r29, 0x3e	; 62
	WDTCR |= WDT_MASK_DISABLE;
    12fe:	a1 e4       	ldi	r26, 0x41	; 65
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	e1 e4       	ldi	r30, 0x41	; 65
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	88 61       	ori	r24, 0x18	; 24
    130a:	8c 93       	st	X, r24
	WDTCR = 0;
    130c:	e1 e4       	ldi	r30, 0x41	; 65
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	10 82       	st	Z, r1
}
    1312:	cf 91       	pop	r28
    1314:	df 91       	pop	r29
    1316:	08 95       	ret

00001318 <WDT_u8Sleep>:

u8 WDT_u8Sleep(u8 Copy_u8SleepTime)
{
    1318:	df 93       	push	r29
    131a:	cf 93       	push	r28
    131c:	00 d0       	rcall	.+0      	; 0x131e <WDT_u8Sleep+0x6>
    131e:	cd b7       	in	r28, 0x3d	; 61
    1320:	de b7       	in	r29, 0x3e	; 62
    1322:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    1324:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8SleepTime<8)
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	88 30       	cpi	r24, 0x08	; 8
    132a:	80 f4       	brcc	.+32     	; 0x134c <WDT_u8Sleep+0x34>
	{
		WDTCR &=WDT_PRESCALER_MASK;
    132c:	a1 e4       	ldi	r26, 0x41	; 65
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	e1 e4       	ldi	r30, 0x41	; 65
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	88 7f       	andi	r24, 0xF8	; 248
    1338:	8c 93       	st	X, r24
		WDTCR |= Copy_u8SleepTime ;
    133a:	a1 e4       	ldi	r26, 0x41	; 65
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	e1 e4       	ldi	r30, 0x41	; 65
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	90 81       	ld	r25, Z
    1344:	8a 81       	ldd	r24, Y+2	; 0x02
    1346:	89 2b       	or	r24, r25
    1348:	8c 93       	st	X, r24
    134a:	02 c0       	rjmp	.+4      	; 0x1350 <WDT_u8Sleep+0x38>
	}
	else
	{
		Local_u8ErrorState=NOK;
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1350:	89 81       	ldd	r24, Y+1	; 0x01
}
    1352:	0f 90       	pop	r0
    1354:	0f 90       	pop	r0
    1356:	cf 91       	pop	r28
    1358:	df 91       	pop	r29
    135a:	08 95       	ret

0000135c <__vector_5>:

void __vector_5 (void)  __attribute__((signal));
void __vector_5 (void)
{
    135c:	1f 92       	push	r1
    135e:	0f 92       	push	r0
    1360:	0f b6       	in	r0, 0x3f	; 63
    1362:	0f 92       	push	r0
    1364:	11 24       	eor	r1, r1
    1366:	2f 93       	push	r18
    1368:	3f 93       	push	r19
    136a:	4f 93       	push	r20
    136c:	5f 93       	push	r21
    136e:	6f 93       	push	r22
    1370:	7f 93       	push	r23
    1372:	8f 93       	push	r24
    1374:	9f 93       	push	r25
    1376:	af 93       	push	r26
    1378:	bf 93       	push	r27
    137a:	ef 93       	push	r30
    137c:	ff 93       	push	r31
    137e:	df 93       	push	r29
    1380:	cf 93       	push	r28
    1382:	cd b7       	in	r28, 0x3d	; 61
    1384:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8Counter = 0;
		Local_u8Counter++;
    1386:	80 91 c0 01 	lds	r24, 0x01C0
    138a:	8f 5f       	subi	r24, 0xFF	; 255
    138c:	80 93 c0 01 	sts	0x01C0, r24

		if(Local_u8Counter == 31)
    1390:	80 91 c0 01 	lds	r24, 0x01C0
    1394:	8f 31       	cpi	r24, 0x1F	; 31
    1396:	89 f4       	brne	.+34     	; 0x13ba <__vector_5+0x5e>
		{
			Local_u8Counter = 0;
    1398:	10 92 c0 01 	sts	0x01C0, r1
			TCNT2 = TIMER2_u8PRELOAD_Val;
    139c:	e4 e4       	ldi	r30, 0x44	; 68
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	8d e5       	ldi	r24, 0x5D	; 93
    13a2:	80 83       	st	Z, r24
			if (TIMER2_pvOverflowCallBackFunc != NULL)
    13a4:	80 91 ba 01 	lds	r24, 0x01BA
    13a8:	90 91 bb 01 	lds	r25, 0x01BB
    13ac:	00 97       	sbiw	r24, 0x00	; 0
    13ae:	29 f0       	breq	.+10     	; 0x13ba <__vector_5+0x5e>
			{
				TIMER2_pvOverflowCallBackFunc();
    13b0:	e0 91 ba 01 	lds	r30, 0x01BA
    13b4:	f0 91 bb 01 	lds	r31, 0x01BB
    13b8:	09 95       	icall
			else
			{

			}
		}
}
    13ba:	cf 91       	pop	r28
    13bc:	df 91       	pop	r29
    13be:	ff 91       	pop	r31
    13c0:	ef 91       	pop	r30
    13c2:	bf 91       	pop	r27
    13c4:	af 91       	pop	r26
    13c6:	9f 91       	pop	r25
    13c8:	8f 91       	pop	r24
    13ca:	7f 91       	pop	r23
    13cc:	6f 91       	pop	r22
    13ce:	5f 91       	pop	r21
    13d0:	4f 91       	pop	r20
    13d2:	3f 91       	pop	r19
    13d4:	2f 91       	pop	r18
    13d6:	0f 90       	pop	r0
    13d8:	0f be       	out	0x3f, r0	; 63
    13da:	0f 90       	pop	r0
    13dc:	1f 90       	pop	r1
    13de:	18 95       	reti

000013e0 <__vector_11>:
void __vector_11 (void)  __attribute__((signal));
void __vector_11 (void)
{
    13e0:	1f 92       	push	r1
    13e2:	0f 92       	push	r0
    13e4:	0f b6       	in	r0, 0x3f	; 63
    13e6:	0f 92       	push	r0
    13e8:	11 24       	eor	r1, r1
    13ea:	2f 93       	push	r18
    13ec:	3f 93       	push	r19
    13ee:	4f 93       	push	r20
    13f0:	5f 93       	push	r21
    13f2:	6f 93       	push	r22
    13f4:	7f 93       	push	r23
    13f6:	8f 93       	push	r24
    13f8:	9f 93       	push	r25
    13fa:	af 93       	push	r26
    13fc:	bf 93       	push	r27
    13fe:	ef 93       	push	r30
    1400:	ff 93       	push	r31
    1402:	df 93       	push	r29
    1404:	cf 93       	push	r28
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8Counter = 0;
	Local_u8Counter++;
    140a:	80 91 c1 01 	lds	r24, 0x01C1
    140e:	8f 5f       	subi	r24, 0xFF	; 255
    1410:	80 93 c1 01 	sts	0x01C1, r24

	if(Local_u8Counter == 31)
    1414:	80 91 c1 01 	lds	r24, 0x01C1
    1418:	8f 31       	cpi	r24, 0x1F	; 31
    141a:	89 f4       	brne	.+34     	; 0x143e <__vector_11+0x5e>
	{
		Local_u8Counter = 0;
    141c:	10 92 c1 01 	sts	0x01C1, r1
		TCNT0 = TIMER0_u8PRELOAD_Val;
    1420:	e2 e5       	ldi	r30, 0x52	; 82
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	8d e5       	ldi	r24, 0x5D	; 93
    1426:	80 83       	st	Z, r24
		if (TIMER0_pvOverflowCallBackFunc != NULL)
    1428:	80 91 b6 01 	lds	r24, 0x01B6
    142c:	90 91 b7 01 	lds	r25, 0x01B7
    1430:	00 97       	sbiw	r24, 0x00	; 0
    1432:	29 f0       	breq	.+10     	; 0x143e <__vector_11+0x5e>
		{
			TIMER0_pvOverflowCallBackFunc();
    1434:	e0 91 b6 01 	lds	r30, 0x01B6
    1438:	f0 91 b7 01 	lds	r31, 0x01B7
    143c:	09 95       	icall
		else
		{

		}
	}
}
    143e:	cf 91       	pop	r28
    1440:	df 91       	pop	r29
    1442:	ff 91       	pop	r31
    1444:	ef 91       	pop	r30
    1446:	bf 91       	pop	r27
    1448:	af 91       	pop	r26
    144a:	9f 91       	pop	r25
    144c:	8f 91       	pop	r24
    144e:	7f 91       	pop	r23
    1450:	6f 91       	pop	r22
    1452:	5f 91       	pop	r21
    1454:	4f 91       	pop	r20
    1456:	3f 91       	pop	r19
    1458:	2f 91       	pop	r18
    145a:	0f 90       	pop	r0
    145c:	0f be       	out	0x3f, r0	; 63
    145e:	0f 90       	pop	r0
    1460:	1f 90       	pop	r1
    1462:	18 95       	reti

00001464 <__vector_10>:
void __vector_10 (void)  __attribute__((signal));
void __vector_10 (void)
{
    1464:	1f 92       	push	r1
    1466:	0f 92       	push	r0
    1468:	0f b6       	in	r0, 0x3f	; 63
    146a:	0f 92       	push	r0
    146c:	11 24       	eor	r1, r1
    146e:	2f 93       	push	r18
    1470:	3f 93       	push	r19
    1472:	4f 93       	push	r20
    1474:	5f 93       	push	r21
    1476:	6f 93       	push	r22
    1478:	7f 93       	push	r23
    147a:	8f 93       	push	r24
    147c:	9f 93       	push	r25
    147e:	af 93       	push	r26
    1480:	bf 93       	push	r27
    1482:	ef 93       	push	r30
    1484:	ff 93       	push	r31
    1486:	df 93       	push	r29
    1488:	cf 93       	push	r28
    148a:	cd b7       	in	r28, 0x3d	; 61
    148c:	de b7       	in	r29, 0x3e	; 62

	static u8 Local_u8Counter = 0;
	Local_u8Counter++;
    148e:	80 91 c2 01 	lds	r24, 0x01C2
    1492:	8f 5f       	subi	r24, 0xFF	; 255
    1494:	80 93 c2 01 	sts	0x01C2, r24

	if(Local_u8Counter == 31)
    1498:	80 91 c2 01 	lds	r24, 0x01C2
    149c:	8f 31       	cpi	r24, 0x1F	; 31
    149e:	59 f4       	brne	.+22     	; 0x14b6 <__vector_10+0x52>
	{
		if (TIMER0_pvCompMatchCallBackFunc != NULL)
    14a0:	80 91 b8 01 	lds	r24, 0x01B8
    14a4:	90 91 b9 01 	lds	r25, 0x01B9
    14a8:	00 97       	sbiw	r24, 0x00	; 0
    14aa:	29 f0       	breq	.+10     	; 0x14b6 <__vector_10+0x52>
		{
			TIMER0_pvCompMatchCallBackFunc();
    14ac:	e0 91 b8 01 	lds	r30, 0x01B8
    14b0:	f0 91 b9 01 	lds	r31, 0x01B9
    14b4:	09 95       	icall
		else
		{

		}
	}
}
    14b6:	cf 91       	pop	r28
    14b8:	df 91       	pop	r29
    14ba:	ff 91       	pop	r31
    14bc:	ef 91       	pop	r30
    14be:	bf 91       	pop	r27
    14c0:	af 91       	pop	r26
    14c2:	9f 91       	pop	r25
    14c4:	8f 91       	pop	r24
    14c6:	7f 91       	pop	r23
    14c8:	6f 91       	pop	r22
    14ca:	5f 91       	pop	r21
    14cc:	4f 91       	pop	r20
    14ce:	3f 91       	pop	r19
    14d0:	2f 91       	pop	r18
    14d2:	0f 90       	pop	r0
    14d4:	0f be       	out	0x3f, r0	; 63
    14d6:	0f 90       	pop	r0
    14d8:	1f 90       	pop	r1
    14da:	18 95       	reti

000014dc <__vector_6>:

void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
    14dc:	1f 92       	push	r1
    14de:	0f 92       	push	r0
    14e0:	0f b6       	in	r0, 0x3f	; 63
    14e2:	0f 92       	push	r0
    14e4:	11 24       	eor	r1, r1
    14e6:	2f 93       	push	r18
    14e8:	3f 93       	push	r19
    14ea:	4f 93       	push	r20
    14ec:	5f 93       	push	r21
    14ee:	6f 93       	push	r22
    14f0:	7f 93       	push	r23
    14f2:	8f 93       	push	r24
    14f4:	9f 93       	push	r25
    14f6:	af 93       	push	r26
    14f8:	bf 93       	push	r27
    14fa:	ef 93       	push	r30
    14fc:	ff 93       	push	r31
    14fe:	df 93       	push	r29
    1500:	cf 93       	push	r28
    1502:	cd b7       	in	r28, 0x3d	; 61
    1504:	de b7       	in	r29, 0x3e	; 62
	if (ICU_pvCallBackFunc != NULL)
    1506:	80 91 be 01 	lds	r24, 0x01BE
    150a:	90 91 bf 01 	lds	r25, 0x01BF
    150e:	00 97       	sbiw	r24, 0x00	; 0
    1510:	29 f0       	breq	.+10     	; 0x151c <__vector_6+0x40>
	{
		ICU_pvCallBackFunc();
    1512:	e0 91 be 01 	lds	r30, 0x01BE
    1516:	f0 91 bf 01 	lds	r31, 0x01BF
    151a:	09 95       	icall
	}
	else
	{

	}
}
    151c:	cf 91       	pop	r28
    151e:	df 91       	pop	r29
    1520:	ff 91       	pop	r31
    1522:	ef 91       	pop	r30
    1524:	bf 91       	pop	r27
    1526:	af 91       	pop	r26
    1528:	9f 91       	pop	r25
    152a:	8f 91       	pop	r24
    152c:	7f 91       	pop	r23
    152e:	6f 91       	pop	r22
    1530:	5f 91       	pop	r21
    1532:	4f 91       	pop	r20
    1534:	3f 91       	pop	r19
    1536:	2f 91       	pop	r18
    1538:	0f 90       	pop	r0
    153a:	0f be       	out	0x3f, r0	; 63
    153c:	0f 90       	pop	r0
    153e:	1f 90       	pop	r1
    1540:	18 95       	reti

00001542 <PORT_voidInit>:
#include "PORT_private.h"
#include "PORT_interface.h"
#include "PORT_register.h"

void PORT_voidInit(void)
{
    1542:	df 93       	push	r29
    1544:	cf 93       	push	r28
    1546:	cd b7       	in	r28, 0x3d	; 61
    1548:	de b7       	in	r29, 0x3e	; 62
	DDRA= PORTA_DIR;
    154a:	ea e3       	ldi	r30, 0x3A	; 58
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	8f ef       	ldi	r24, 0xFF	; 255
    1550:	80 83       	st	Z, r24
	DDRB= PORTB_DIR;
    1552:	e7 e3       	ldi	r30, 0x37	; 55
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	8f ef       	ldi	r24, 0xFF	; 255
    1558:	80 83       	st	Z, r24
	DDRC= PORTC_DIR;
    155a:	e4 e3       	ldi	r30, 0x34	; 52
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	8f e0       	ldi	r24, 0x0F	; 15
    1560:	80 83       	st	Z, r24
	DDRD= PORTD_DIR;
    1562:	e1 e3       	ldi	r30, 0x31	; 49
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 e2       	ldi	r24, 0x20	; 32
    1568:	80 83       	st	Z, r24
	
	PORTA=PORTA_INITIAL_VALUE;
    156a:	eb e3       	ldi	r30, 0x3B	; 59
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	83 e0       	ldi	r24, 0x03	; 3
    1570:	80 83       	st	Z, r24
	PORTB=PORTB_INITIAL_VALUE;
    1572:	e8 e3       	ldi	r30, 0x38	; 56
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	10 82       	st	Z, r1
	PORTC=PORTC_INITIAL_VALUE;
    1578:	e5 e3       	ldi	r30, 0x35	; 53
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	8f ef       	ldi	r24, 0xFF	; 255
    157e:	80 83       	st	Z, r24
	PORTD=PORTD_INITIAL_VALUE;
    1580:	e2 e3       	ldi	r30, 0x32	; 50
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	10 82       	st	Z, r1
}
    1586:	cf 91       	pop	r28
    1588:	df 91       	pop	r29
    158a:	08 95       	ret

0000158c <GIE_voidEnableGlobal>:

#include"GIE_interface.h"
#include"GIE_register.h"

void GIE_voidEnableGlobal(void)
{
    158c:	df 93       	push	r29
    158e:	cf 93       	push	r28
    1590:	cd b7       	in	r28, 0x3d	; 61
    1592:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    1594:	af e5       	ldi	r26, 0x5F	; 95
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	ef e5       	ldi	r30, 0x5F	; 95
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	80 68       	ori	r24, 0x80	; 128
    15a0:	8c 93       	st	X, r24
}
    15a2:	cf 91       	pop	r28
    15a4:	df 91       	pop	r29
    15a6:	08 95       	ret

000015a8 <GIE_voidDisableGlobal>:
void GIE_voidDisableGlobal(void)
{
    15a8:	df 93       	push	r29
    15aa:	cf 93       	push	r28
    15ac:	cd b7       	in	r28, 0x3d	; 61
    15ae:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    15b0:	af e5       	ldi	r26, 0x5F	; 95
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	ef e5       	ldi	r30, 0x5F	; 95
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	8f 77       	andi	r24, 0x7F	; 127
    15bc:	8c 93       	st	X, r24
}
    15be:	cf 91       	pop	r28
    15c0:	df 91       	pop	r29
    15c2:	08 95       	ret

000015c4 <DIO_u8SetPinDirection>:
#include "DIO_config.h"
#include "DIO_private.h"
#include "DIO_register.h"

u8 DIO_u8SetPinDirection  (u8 Copy_u8Port, u8 Copy_u8Pin , u8 Copy_u8Direction)
{
    15c4:	df 93       	push	r29
    15c6:	cf 93       	push	r28
    15c8:	cd b7       	in	r28, 0x3d	; 61
    15ca:	de b7       	in	r29, 0x3e	; 62
    15cc:	28 97       	sbiw	r28, 0x08	; 8
    15ce:	0f b6       	in	r0, 0x3f	; 63
    15d0:	f8 94       	cli
    15d2:	de bf       	out	0x3e, r29	; 62
    15d4:	0f be       	out	0x3f, r0	; 63
    15d6:	cd bf       	out	0x3d, r28	; 61
    15d8:	8a 83       	std	Y+2, r24	; 0x02
    15da:	6b 83       	std	Y+3, r22	; 0x03
    15dc:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=OK;
    15de:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin<=DIO_u8PIN7)
    15e0:	8b 81       	ldd	r24, Y+3	; 0x03
    15e2:	88 30       	cpi	r24, 0x08	; 8
    15e4:	08 f0       	brcs	.+2      	; 0x15e8 <DIO_u8SetPinDirection+0x24>
    15e6:	f4 c0       	rjmp	.+488    	; 0x17d0 <DIO_u8SetPinDirection+0x20c>
	{
		if (Copy_u8Direction==DIO_u8PIN_OUTPUT)
    15e8:	8c 81       	ldd	r24, Y+4	; 0x04
    15ea:	81 30       	cpi	r24, 0x01	; 1
    15ec:	09 f0       	breq	.+2      	; 0x15f0 <DIO_u8SetPinDirection+0x2c>
    15ee:	72 c0       	rjmp	.+228    	; 0x16d4 <DIO_u8SetPinDirection+0x110>
		{
			switch (Copy_u8Port)
    15f0:	8a 81       	ldd	r24, Y+2	; 0x02
    15f2:	28 2f       	mov	r18, r24
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	38 87       	std	Y+8, r19	; 0x08
    15f8:	2f 83       	std	Y+7, r18	; 0x07
    15fa:	8f 81       	ldd	r24, Y+7	; 0x07
    15fc:	98 85       	ldd	r25, Y+8	; 0x08
    15fe:	81 30       	cpi	r24, 0x01	; 1
    1600:	91 05       	cpc	r25, r1
    1602:	49 f1       	breq	.+82     	; 0x1656 <DIO_u8SetPinDirection+0x92>
    1604:	2f 81       	ldd	r18, Y+7	; 0x07
    1606:	38 85       	ldd	r19, Y+8	; 0x08
    1608:	22 30       	cpi	r18, 0x02	; 2
    160a:	31 05       	cpc	r19, r1
    160c:	2c f4       	brge	.+10     	; 0x1618 <DIO_u8SetPinDirection+0x54>
    160e:	8f 81       	ldd	r24, Y+7	; 0x07
    1610:	98 85       	ldd	r25, Y+8	; 0x08
    1612:	00 97       	sbiw	r24, 0x00	; 0
    1614:	61 f0       	breq	.+24     	; 0x162e <DIO_u8SetPinDirection+0x6a>
    1616:	5b c0       	rjmp	.+182    	; 0x16ce <DIO_u8SetPinDirection+0x10a>
    1618:	2f 81       	ldd	r18, Y+7	; 0x07
    161a:	38 85       	ldd	r19, Y+8	; 0x08
    161c:	22 30       	cpi	r18, 0x02	; 2
    161e:	31 05       	cpc	r19, r1
    1620:	71 f1       	breq	.+92     	; 0x167e <DIO_u8SetPinDirection+0xba>
    1622:	8f 81       	ldd	r24, Y+7	; 0x07
    1624:	98 85       	ldd	r25, Y+8	; 0x08
    1626:	83 30       	cpi	r24, 0x03	; 3
    1628:	91 05       	cpc	r25, r1
    162a:	e9 f1       	breq	.+122    	; 0x16a6 <DIO_u8SetPinDirection+0xe2>
    162c:	50 c0       	rjmp	.+160    	; 0x16ce <DIO_u8SetPinDirection+0x10a>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
    162e:	aa e3       	ldi	r26, 0x3A	; 58
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	ea e3       	ldi	r30, 0x3A	; 58
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	48 2f       	mov	r20, r24
    163a:	8b 81       	ldd	r24, Y+3	; 0x03
    163c:	28 2f       	mov	r18, r24
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	02 2e       	mov	r0, r18
    1646:	02 c0       	rjmp	.+4      	; 0x164c <DIO_u8SetPinDirection+0x88>
    1648:	88 0f       	add	r24, r24
    164a:	99 1f       	adc	r25, r25
    164c:	0a 94       	dec	r0
    164e:	e2 f7       	brpl	.-8      	; 0x1648 <DIO_u8SetPinDirection+0x84>
    1650:	84 2b       	or	r24, r20
    1652:	8c 93       	st	X, r24
    1654:	bf c0       	rjmp	.+382    	; 0x17d4 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
    1656:	a7 e3       	ldi	r26, 0x37	; 55
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	e7 e3       	ldi	r30, 0x37	; 55
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	48 2f       	mov	r20, r24
    1662:	8b 81       	ldd	r24, Y+3	; 0x03
    1664:	28 2f       	mov	r18, r24
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	02 2e       	mov	r0, r18
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <DIO_u8SetPinDirection+0xb0>
    1670:	88 0f       	add	r24, r24
    1672:	99 1f       	adc	r25, r25
    1674:	0a 94       	dec	r0
    1676:	e2 f7       	brpl	.-8      	; 0x1670 <DIO_u8SetPinDirection+0xac>
    1678:	84 2b       	or	r24, r20
    167a:	8c 93       	st	X, r24
    167c:	ab c0       	rjmp	.+342    	; 0x17d4 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
    167e:	a4 e3       	ldi	r26, 0x34	; 52
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	e4 e3       	ldi	r30, 0x34	; 52
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	48 2f       	mov	r20, r24
    168a:	8b 81       	ldd	r24, Y+3	; 0x03
    168c:	28 2f       	mov	r18, r24
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	02 2e       	mov	r0, r18
    1696:	02 c0       	rjmp	.+4      	; 0x169c <DIO_u8SetPinDirection+0xd8>
    1698:	88 0f       	add	r24, r24
    169a:	99 1f       	adc	r25, r25
    169c:	0a 94       	dec	r0
    169e:	e2 f7       	brpl	.-8      	; 0x1698 <DIO_u8SetPinDirection+0xd4>
    16a0:	84 2b       	or	r24, r20
    16a2:	8c 93       	st	X, r24
    16a4:	97 c0       	rjmp	.+302    	; 0x17d4 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
    16a6:	a1 e3       	ldi	r26, 0x31	; 49
    16a8:	b0 e0       	ldi	r27, 0x00	; 0
    16aa:	e1 e3       	ldi	r30, 0x31	; 49
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	48 2f       	mov	r20, r24
    16b2:	8b 81       	ldd	r24, Y+3	; 0x03
    16b4:	28 2f       	mov	r18, r24
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	02 2e       	mov	r0, r18
    16be:	02 c0       	rjmp	.+4      	; 0x16c4 <DIO_u8SetPinDirection+0x100>
    16c0:	88 0f       	add	r24, r24
    16c2:	99 1f       	adc	r25, r25
    16c4:	0a 94       	dec	r0
    16c6:	e2 f7       	brpl	.-8      	; 0x16c0 <DIO_u8SetPinDirection+0xfc>
    16c8:	84 2b       	or	r24, r20
    16ca:	8c 93       	st	X, r24
    16cc:	83 c0       	rjmp	.+262    	; 0x17d4 <DIO_u8SetPinDirection+0x210>
			default : Local_u8ErrorState=NOK;
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	89 83       	std	Y+1, r24	; 0x01
    16d2:	80 c0       	rjmp	.+256    	; 0x17d4 <DIO_u8SetPinDirection+0x210>
			}
		}
		else if (Copy_u8Direction==DIO_u8PIN_INPUT)
    16d4:	8c 81       	ldd	r24, Y+4	; 0x04
    16d6:	88 23       	and	r24, r24
    16d8:	09 f0       	breq	.+2      	; 0x16dc <DIO_u8SetPinDirection+0x118>
    16da:	77 c0       	rjmp	.+238    	; 0x17ca <DIO_u8SetPinDirection+0x206>
		{
			switch (Copy_u8Port)
    16dc:	8a 81       	ldd	r24, Y+2	; 0x02
    16de:	28 2f       	mov	r18, r24
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	3e 83       	std	Y+6, r19	; 0x06
    16e4:	2d 83       	std	Y+5, r18	; 0x05
    16e6:	8d 81       	ldd	r24, Y+5	; 0x05
    16e8:	9e 81       	ldd	r25, Y+6	; 0x06
    16ea:	81 30       	cpi	r24, 0x01	; 1
    16ec:	91 05       	cpc	r25, r1
    16ee:	59 f1       	breq	.+86     	; 0x1746 <DIO_u8SetPinDirection+0x182>
    16f0:	2d 81       	ldd	r18, Y+5	; 0x05
    16f2:	3e 81       	ldd	r19, Y+6	; 0x06
    16f4:	22 30       	cpi	r18, 0x02	; 2
    16f6:	31 05       	cpc	r19, r1
    16f8:	2c f4       	brge	.+10     	; 0x1704 <DIO_u8SetPinDirection+0x140>
    16fa:	8d 81       	ldd	r24, Y+5	; 0x05
    16fc:	9e 81       	ldd	r25, Y+6	; 0x06
    16fe:	00 97       	sbiw	r24, 0x00	; 0
    1700:	69 f0       	breq	.+26     	; 0x171c <DIO_u8SetPinDirection+0x158>
    1702:	60 c0       	rjmp	.+192    	; 0x17c4 <DIO_u8SetPinDirection+0x200>
    1704:	2d 81       	ldd	r18, Y+5	; 0x05
    1706:	3e 81       	ldd	r19, Y+6	; 0x06
    1708:	22 30       	cpi	r18, 0x02	; 2
    170a:	31 05       	cpc	r19, r1
    170c:	89 f1       	breq	.+98     	; 0x1770 <DIO_u8SetPinDirection+0x1ac>
    170e:	8d 81       	ldd	r24, Y+5	; 0x05
    1710:	9e 81       	ldd	r25, Y+6	; 0x06
    1712:	83 30       	cpi	r24, 0x03	; 3
    1714:	91 05       	cpc	r25, r1
    1716:	09 f4       	brne	.+2      	; 0x171a <DIO_u8SetPinDirection+0x156>
    1718:	40 c0       	rjmp	.+128    	; 0x179a <DIO_u8SetPinDirection+0x1d6>
    171a:	54 c0       	rjmp	.+168    	; 0x17c4 <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
    171c:	aa e3       	ldi	r26, 0x3A	; 58
    171e:	b0 e0       	ldi	r27, 0x00	; 0
    1720:	ea e3       	ldi	r30, 0x3A	; 58
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	48 2f       	mov	r20, r24
    1728:	8b 81       	ldd	r24, Y+3	; 0x03
    172a:	28 2f       	mov	r18, r24
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	02 2e       	mov	r0, r18
    1734:	02 c0       	rjmp	.+4      	; 0x173a <DIO_u8SetPinDirection+0x176>
    1736:	88 0f       	add	r24, r24
    1738:	99 1f       	adc	r25, r25
    173a:	0a 94       	dec	r0
    173c:	e2 f7       	brpl	.-8      	; 0x1736 <DIO_u8SetPinDirection+0x172>
    173e:	80 95       	com	r24
    1740:	84 23       	and	r24, r20
    1742:	8c 93       	st	X, r24
    1744:	47 c0       	rjmp	.+142    	; 0x17d4 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
    1746:	a7 e3       	ldi	r26, 0x37	; 55
    1748:	b0 e0       	ldi	r27, 0x00	; 0
    174a:	e7 e3       	ldi	r30, 0x37	; 55
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	80 81       	ld	r24, Z
    1750:	48 2f       	mov	r20, r24
    1752:	8b 81       	ldd	r24, Y+3	; 0x03
    1754:	28 2f       	mov	r18, r24
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	81 e0       	ldi	r24, 0x01	; 1
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	02 2e       	mov	r0, r18
    175e:	02 c0       	rjmp	.+4      	; 0x1764 <DIO_u8SetPinDirection+0x1a0>
    1760:	88 0f       	add	r24, r24
    1762:	99 1f       	adc	r25, r25
    1764:	0a 94       	dec	r0
    1766:	e2 f7       	brpl	.-8      	; 0x1760 <DIO_u8SetPinDirection+0x19c>
    1768:	80 95       	com	r24
    176a:	84 23       	and	r24, r20
    176c:	8c 93       	st	X, r24
    176e:	32 c0       	rjmp	.+100    	; 0x17d4 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
    1770:	a4 e3       	ldi	r26, 0x34	; 52
    1772:	b0 e0       	ldi	r27, 0x00	; 0
    1774:	e4 e3       	ldi	r30, 0x34	; 52
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	80 81       	ld	r24, Z
    177a:	48 2f       	mov	r20, r24
    177c:	8b 81       	ldd	r24, Y+3	; 0x03
    177e:	28 2f       	mov	r18, r24
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	02 2e       	mov	r0, r18
    1788:	02 c0       	rjmp	.+4      	; 0x178e <DIO_u8SetPinDirection+0x1ca>
    178a:	88 0f       	add	r24, r24
    178c:	99 1f       	adc	r25, r25
    178e:	0a 94       	dec	r0
    1790:	e2 f7       	brpl	.-8      	; 0x178a <DIO_u8SetPinDirection+0x1c6>
    1792:	80 95       	com	r24
    1794:	84 23       	and	r24, r20
    1796:	8c 93       	st	X, r24
    1798:	1d c0       	rjmp	.+58     	; 0x17d4 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
    179a:	a1 e3       	ldi	r26, 0x31	; 49
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	e1 e3       	ldi	r30, 0x31	; 49
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 81       	ld	r24, Z
    17a4:	48 2f       	mov	r20, r24
    17a6:	8b 81       	ldd	r24, Y+3	; 0x03
    17a8:	28 2f       	mov	r18, r24
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	02 2e       	mov	r0, r18
    17b2:	02 c0       	rjmp	.+4      	; 0x17b8 <DIO_u8SetPinDirection+0x1f4>
    17b4:	88 0f       	add	r24, r24
    17b6:	99 1f       	adc	r25, r25
    17b8:	0a 94       	dec	r0
    17ba:	e2 f7       	brpl	.-8      	; 0x17b4 <DIO_u8SetPinDirection+0x1f0>
    17bc:	80 95       	com	r24
    17be:	84 23       	and	r24, r20
    17c0:	8c 93       	st	X, r24
    17c2:	08 c0       	rjmp	.+16     	; 0x17d4 <DIO_u8SetPinDirection+0x210>
			default : Local_u8ErrorState=NOK;
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	89 83       	std	Y+1, r24	; 0x01
    17c8:	05 c0       	rjmp	.+10     	; 0x17d4 <DIO_u8SetPinDirection+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=NOK;
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	89 83       	std	Y+1, r24	; 0x01
    17ce:	02 c0       	rjmp	.+4      	; 0x17d4 <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=NOK;
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
    17d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    17d6:	28 96       	adiw	r28, 0x08	; 8
    17d8:	0f b6       	in	r0, 0x3f	; 63
    17da:	f8 94       	cli
    17dc:	de bf       	out	0x3e, r29	; 62
    17de:	0f be       	out	0x3f, r0	; 63
    17e0:	cd bf       	out	0x3d, r28	; 61
    17e2:	cf 91       	pop	r28
    17e4:	df 91       	pop	r29
    17e6:	08 95       	ret

000017e8 <DIO_u8SetPortDirection>:
u8 DIO_u8SetPortDirection (u8 Copy_u8Port, u8 Copy_u8Direction)
{
    17e8:	df 93       	push	r29
    17ea:	cf 93       	push	r28
    17ec:	00 d0       	rcall	.+0      	; 0x17ee <DIO_u8SetPortDirection+0x6>
    17ee:	00 d0       	rcall	.+0      	; 0x17f0 <DIO_u8SetPortDirection+0x8>
    17f0:	0f 92       	push	r0
    17f2:	cd b7       	in	r28, 0x3d	; 61
    17f4:	de b7       	in	r29, 0x3e	; 62
    17f6:	8a 83       	std	Y+2, r24	; 0x02
    17f8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=OK;
    17fa:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_u8Port)
    17fc:	8a 81       	ldd	r24, Y+2	; 0x02
    17fe:	28 2f       	mov	r18, r24
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	3d 83       	std	Y+5, r19	; 0x05
    1804:	2c 83       	std	Y+4, r18	; 0x04
    1806:	8c 81       	ldd	r24, Y+4	; 0x04
    1808:	9d 81       	ldd	r25, Y+5	; 0x05
    180a:	81 30       	cpi	r24, 0x01	; 1
    180c:	91 05       	cpc	r25, r1
    180e:	d1 f0       	breq	.+52     	; 0x1844 <DIO_u8SetPortDirection+0x5c>
    1810:	2c 81       	ldd	r18, Y+4	; 0x04
    1812:	3d 81       	ldd	r19, Y+5	; 0x05
    1814:	22 30       	cpi	r18, 0x02	; 2
    1816:	31 05       	cpc	r19, r1
    1818:	2c f4       	brge	.+10     	; 0x1824 <DIO_u8SetPortDirection+0x3c>
    181a:	8c 81       	ldd	r24, Y+4	; 0x04
    181c:	9d 81       	ldd	r25, Y+5	; 0x05
    181e:	00 97       	sbiw	r24, 0x00	; 0
    1820:	61 f0       	breq	.+24     	; 0x183a <DIO_u8SetPortDirection+0x52>
    1822:	1f c0       	rjmp	.+62     	; 0x1862 <DIO_u8SetPortDirection+0x7a>
    1824:	2c 81       	ldd	r18, Y+4	; 0x04
    1826:	3d 81       	ldd	r19, Y+5	; 0x05
    1828:	22 30       	cpi	r18, 0x02	; 2
    182a:	31 05       	cpc	r19, r1
    182c:	81 f0       	breq	.+32     	; 0x184e <DIO_u8SetPortDirection+0x66>
    182e:	8c 81       	ldd	r24, Y+4	; 0x04
    1830:	9d 81       	ldd	r25, Y+5	; 0x05
    1832:	83 30       	cpi	r24, 0x03	; 3
    1834:	91 05       	cpc	r25, r1
    1836:	81 f0       	breq	.+32     	; 0x1858 <DIO_u8SetPortDirection+0x70>
    1838:	14 c0       	rjmp	.+40     	; 0x1862 <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8PORTA: DDRA=Copy_u8Direction; break;
    183a:	ea e3       	ldi	r30, 0x3A	; 58
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	8b 81       	ldd	r24, Y+3	; 0x03
    1840:	80 83       	st	Z, r24
    1842:	11 c0       	rjmp	.+34     	; 0x1866 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB: DDRB=Copy_u8Direction; break;
    1844:	e7 e3       	ldi	r30, 0x37	; 55
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	8b 81       	ldd	r24, Y+3	; 0x03
    184a:	80 83       	st	Z, r24
    184c:	0c c0       	rjmp	.+24     	; 0x1866 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC: DDRC=Copy_u8Direction; break;
    184e:	e4 e3       	ldi	r30, 0x34	; 52
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	8b 81       	ldd	r24, Y+3	; 0x03
    1854:	80 83       	st	Z, r24
    1856:	07 c0       	rjmp	.+14     	; 0x1866 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD: DDRD=Copy_u8Direction; break;
    1858:	e1 e3       	ldi	r30, 0x31	; 49
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	8b 81       	ldd	r24, Y+3	; 0x03
    185e:	80 83       	st	Z, r24
    1860:	02 c0       	rjmp	.+4      	; 0x1866 <DIO_u8SetPortDirection+0x7e>
	default : Local_u8ErrorState=NOK;
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
    1866:	89 81       	ldd	r24, Y+1	; 0x01
}
    1868:	0f 90       	pop	r0
    186a:	0f 90       	pop	r0
    186c:	0f 90       	pop	r0
    186e:	0f 90       	pop	r0
    1870:	0f 90       	pop	r0
    1872:	cf 91       	pop	r28
    1874:	df 91       	pop	r29
    1876:	08 95       	ret

00001878 <DIO_u8SetPinValue>:
u8 DIO_u8SetPinValue      (u8 Copy_u8Port, u8 Copy_u8Pin , u8 Copy_u8Value)
{
    1878:	df 93       	push	r29
    187a:	cf 93       	push	r28
    187c:	cd b7       	in	r28, 0x3d	; 61
    187e:	de b7       	in	r29, 0x3e	; 62
    1880:	28 97       	sbiw	r28, 0x08	; 8
    1882:	0f b6       	in	r0, 0x3f	; 63
    1884:	f8 94       	cli
    1886:	de bf       	out	0x3e, r29	; 62
    1888:	0f be       	out	0x3f, r0	; 63
    188a:	cd bf       	out	0x3d, r28	; 61
    188c:	8a 83       	std	Y+2, r24	; 0x02
    188e:	6b 83       	std	Y+3, r22	; 0x03
    1890:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=OK;
    1892:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin<=DIO_u8PIN7)
    1894:	8b 81       	ldd	r24, Y+3	; 0x03
    1896:	88 30       	cpi	r24, 0x08	; 8
    1898:	08 f0       	brcs	.+2      	; 0x189c <DIO_u8SetPinValue+0x24>
    189a:	f4 c0       	rjmp	.+488    	; 0x1a84 <DIO_u8SetPinValue+0x20c>
	{
		if (Copy_u8Value==DIO_u8PIN_HIGH)
    189c:	8c 81       	ldd	r24, Y+4	; 0x04
    189e:	81 30       	cpi	r24, 0x01	; 1
    18a0:	09 f0       	breq	.+2      	; 0x18a4 <DIO_u8SetPinValue+0x2c>
    18a2:	72 c0       	rjmp	.+228    	; 0x1988 <DIO_u8SetPinValue+0x110>
		{
			switch (Copy_u8Port)
    18a4:	8a 81       	ldd	r24, Y+2	; 0x02
    18a6:	28 2f       	mov	r18, r24
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	38 87       	std	Y+8, r19	; 0x08
    18ac:	2f 83       	std	Y+7, r18	; 0x07
    18ae:	8f 81       	ldd	r24, Y+7	; 0x07
    18b0:	98 85       	ldd	r25, Y+8	; 0x08
    18b2:	81 30       	cpi	r24, 0x01	; 1
    18b4:	91 05       	cpc	r25, r1
    18b6:	49 f1       	breq	.+82     	; 0x190a <DIO_u8SetPinValue+0x92>
    18b8:	2f 81       	ldd	r18, Y+7	; 0x07
    18ba:	38 85       	ldd	r19, Y+8	; 0x08
    18bc:	22 30       	cpi	r18, 0x02	; 2
    18be:	31 05       	cpc	r19, r1
    18c0:	2c f4       	brge	.+10     	; 0x18cc <DIO_u8SetPinValue+0x54>
    18c2:	8f 81       	ldd	r24, Y+7	; 0x07
    18c4:	98 85       	ldd	r25, Y+8	; 0x08
    18c6:	00 97       	sbiw	r24, 0x00	; 0
    18c8:	61 f0       	breq	.+24     	; 0x18e2 <DIO_u8SetPinValue+0x6a>
    18ca:	5b c0       	rjmp	.+182    	; 0x1982 <DIO_u8SetPinValue+0x10a>
    18cc:	2f 81       	ldd	r18, Y+7	; 0x07
    18ce:	38 85       	ldd	r19, Y+8	; 0x08
    18d0:	22 30       	cpi	r18, 0x02	; 2
    18d2:	31 05       	cpc	r19, r1
    18d4:	71 f1       	breq	.+92     	; 0x1932 <DIO_u8SetPinValue+0xba>
    18d6:	8f 81       	ldd	r24, Y+7	; 0x07
    18d8:	98 85       	ldd	r25, Y+8	; 0x08
    18da:	83 30       	cpi	r24, 0x03	; 3
    18dc:	91 05       	cpc	r25, r1
    18de:	e9 f1       	breq	.+122    	; 0x195a <DIO_u8SetPinValue+0xe2>
    18e0:	50 c0       	rjmp	.+160    	; 0x1982 <DIO_u8SetPinValue+0x10a>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
    18e2:	ab e3       	ldi	r26, 0x3B	; 59
    18e4:	b0 e0       	ldi	r27, 0x00	; 0
    18e6:	eb e3       	ldi	r30, 0x3B	; 59
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	48 2f       	mov	r20, r24
    18ee:	8b 81       	ldd	r24, Y+3	; 0x03
    18f0:	28 2f       	mov	r18, r24
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	02 2e       	mov	r0, r18
    18fa:	02 c0       	rjmp	.+4      	; 0x1900 <DIO_u8SetPinValue+0x88>
    18fc:	88 0f       	add	r24, r24
    18fe:	99 1f       	adc	r25, r25
    1900:	0a 94       	dec	r0
    1902:	e2 f7       	brpl	.-8      	; 0x18fc <DIO_u8SetPinValue+0x84>
    1904:	84 2b       	or	r24, r20
    1906:	8c 93       	st	X, r24
    1908:	bf c0       	rjmp	.+382    	; 0x1a88 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
    190a:	a8 e3       	ldi	r26, 0x38	; 56
    190c:	b0 e0       	ldi	r27, 0x00	; 0
    190e:	e8 e3       	ldi	r30, 0x38	; 56
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	80 81       	ld	r24, Z
    1914:	48 2f       	mov	r20, r24
    1916:	8b 81       	ldd	r24, Y+3	; 0x03
    1918:	28 2f       	mov	r18, r24
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	02 2e       	mov	r0, r18
    1922:	02 c0       	rjmp	.+4      	; 0x1928 <DIO_u8SetPinValue+0xb0>
    1924:	88 0f       	add	r24, r24
    1926:	99 1f       	adc	r25, r25
    1928:	0a 94       	dec	r0
    192a:	e2 f7       	brpl	.-8      	; 0x1924 <DIO_u8SetPinValue+0xac>
    192c:	84 2b       	or	r24, r20
    192e:	8c 93       	st	X, r24
    1930:	ab c0       	rjmp	.+342    	; 0x1a88 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
    1932:	a5 e3       	ldi	r26, 0x35	; 53
    1934:	b0 e0       	ldi	r27, 0x00	; 0
    1936:	e5 e3       	ldi	r30, 0x35	; 53
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	80 81       	ld	r24, Z
    193c:	48 2f       	mov	r20, r24
    193e:	8b 81       	ldd	r24, Y+3	; 0x03
    1940:	28 2f       	mov	r18, r24
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	02 2e       	mov	r0, r18
    194a:	02 c0       	rjmp	.+4      	; 0x1950 <DIO_u8SetPinValue+0xd8>
    194c:	88 0f       	add	r24, r24
    194e:	99 1f       	adc	r25, r25
    1950:	0a 94       	dec	r0
    1952:	e2 f7       	brpl	.-8      	; 0x194c <DIO_u8SetPinValue+0xd4>
    1954:	84 2b       	or	r24, r20
    1956:	8c 93       	st	X, r24
    1958:	97 c0       	rjmp	.+302    	; 0x1a88 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
    195a:	a2 e3       	ldi	r26, 0x32	; 50
    195c:	b0 e0       	ldi	r27, 0x00	; 0
    195e:	e2 e3       	ldi	r30, 0x32	; 50
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	80 81       	ld	r24, Z
    1964:	48 2f       	mov	r20, r24
    1966:	8b 81       	ldd	r24, Y+3	; 0x03
    1968:	28 2f       	mov	r18, r24
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	02 2e       	mov	r0, r18
    1972:	02 c0       	rjmp	.+4      	; 0x1978 <DIO_u8SetPinValue+0x100>
    1974:	88 0f       	add	r24, r24
    1976:	99 1f       	adc	r25, r25
    1978:	0a 94       	dec	r0
    197a:	e2 f7       	brpl	.-8      	; 0x1974 <DIO_u8SetPinValue+0xfc>
    197c:	84 2b       	or	r24, r20
    197e:	8c 93       	st	X, r24
    1980:	83 c0       	rjmp	.+262    	; 0x1a88 <DIO_u8SetPinValue+0x210>
			default : Local_u8ErrorState=NOK;
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	89 83       	std	Y+1, r24	; 0x01
    1986:	80 c0       	rjmp	.+256    	; 0x1a88 <DIO_u8SetPinValue+0x210>
			}
		}
		else if (Copy_u8Value==DIO_u8PIN_LOW)
    1988:	8c 81       	ldd	r24, Y+4	; 0x04
    198a:	88 23       	and	r24, r24
    198c:	09 f0       	breq	.+2      	; 0x1990 <DIO_u8SetPinValue+0x118>
    198e:	77 c0       	rjmp	.+238    	; 0x1a7e <DIO_u8SetPinValue+0x206>
		{
			switch (Copy_u8Port)
    1990:	8a 81       	ldd	r24, Y+2	; 0x02
    1992:	28 2f       	mov	r18, r24
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	3e 83       	std	Y+6, r19	; 0x06
    1998:	2d 83       	std	Y+5, r18	; 0x05
    199a:	8d 81       	ldd	r24, Y+5	; 0x05
    199c:	9e 81       	ldd	r25, Y+6	; 0x06
    199e:	81 30       	cpi	r24, 0x01	; 1
    19a0:	91 05       	cpc	r25, r1
    19a2:	59 f1       	breq	.+86     	; 0x19fa <DIO_u8SetPinValue+0x182>
    19a4:	2d 81       	ldd	r18, Y+5	; 0x05
    19a6:	3e 81       	ldd	r19, Y+6	; 0x06
    19a8:	22 30       	cpi	r18, 0x02	; 2
    19aa:	31 05       	cpc	r19, r1
    19ac:	2c f4       	brge	.+10     	; 0x19b8 <DIO_u8SetPinValue+0x140>
    19ae:	8d 81       	ldd	r24, Y+5	; 0x05
    19b0:	9e 81       	ldd	r25, Y+6	; 0x06
    19b2:	00 97       	sbiw	r24, 0x00	; 0
    19b4:	69 f0       	breq	.+26     	; 0x19d0 <DIO_u8SetPinValue+0x158>
    19b6:	60 c0       	rjmp	.+192    	; 0x1a78 <DIO_u8SetPinValue+0x200>
    19b8:	2d 81       	ldd	r18, Y+5	; 0x05
    19ba:	3e 81       	ldd	r19, Y+6	; 0x06
    19bc:	22 30       	cpi	r18, 0x02	; 2
    19be:	31 05       	cpc	r19, r1
    19c0:	89 f1       	breq	.+98     	; 0x1a24 <DIO_u8SetPinValue+0x1ac>
    19c2:	8d 81       	ldd	r24, Y+5	; 0x05
    19c4:	9e 81       	ldd	r25, Y+6	; 0x06
    19c6:	83 30       	cpi	r24, 0x03	; 3
    19c8:	91 05       	cpc	r25, r1
    19ca:	09 f4       	brne	.+2      	; 0x19ce <DIO_u8SetPinValue+0x156>
    19cc:	40 c0       	rjmp	.+128    	; 0x1a4e <DIO_u8SetPinValue+0x1d6>
    19ce:	54 c0       	rjmp	.+168    	; 0x1a78 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
    19d0:	ab e3       	ldi	r26, 0x3B	; 59
    19d2:	b0 e0       	ldi	r27, 0x00	; 0
    19d4:	eb e3       	ldi	r30, 0x3B	; 59
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	80 81       	ld	r24, Z
    19da:	48 2f       	mov	r20, r24
    19dc:	8b 81       	ldd	r24, Y+3	; 0x03
    19de:	28 2f       	mov	r18, r24
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	02 2e       	mov	r0, r18
    19e8:	02 c0       	rjmp	.+4      	; 0x19ee <DIO_u8SetPinValue+0x176>
    19ea:	88 0f       	add	r24, r24
    19ec:	99 1f       	adc	r25, r25
    19ee:	0a 94       	dec	r0
    19f0:	e2 f7       	brpl	.-8      	; 0x19ea <DIO_u8SetPinValue+0x172>
    19f2:	80 95       	com	r24
    19f4:	84 23       	and	r24, r20
    19f6:	8c 93       	st	X, r24
    19f8:	47 c0       	rjmp	.+142    	; 0x1a88 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
    19fa:	a8 e3       	ldi	r26, 0x38	; 56
    19fc:	b0 e0       	ldi	r27, 0x00	; 0
    19fe:	e8 e3       	ldi	r30, 0x38	; 56
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	80 81       	ld	r24, Z
    1a04:	48 2f       	mov	r20, r24
    1a06:	8b 81       	ldd	r24, Y+3	; 0x03
    1a08:	28 2f       	mov	r18, r24
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	02 2e       	mov	r0, r18
    1a12:	02 c0       	rjmp	.+4      	; 0x1a18 <DIO_u8SetPinValue+0x1a0>
    1a14:	88 0f       	add	r24, r24
    1a16:	99 1f       	adc	r25, r25
    1a18:	0a 94       	dec	r0
    1a1a:	e2 f7       	brpl	.-8      	; 0x1a14 <DIO_u8SetPinValue+0x19c>
    1a1c:	80 95       	com	r24
    1a1e:	84 23       	and	r24, r20
    1a20:	8c 93       	st	X, r24
    1a22:	32 c0       	rjmp	.+100    	; 0x1a88 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
    1a24:	a5 e3       	ldi	r26, 0x35	; 53
    1a26:	b0 e0       	ldi	r27, 0x00	; 0
    1a28:	e5 e3       	ldi	r30, 0x35	; 53
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	80 81       	ld	r24, Z
    1a2e:	48 2f       	mov	r20, r24
    1a30:	8b 81       	ldd	r24, Y+3	; 0x03
    1a32:	28 2f       	mov	r18, r24
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	02 2e       	mov	r0, r18
    1a3c:	02 c0       	rjmp	.+4      	; 0x1a42 <DIO_u8SetPinValue+0x1ca>
    1a3e:	88 0f       	add	r24, r24
    1a40:	99 1f       	adc	r25, r25
    1a42:	0a 94       	dec	r0
    1a44:	e2 f7       	brpl	.-8      	; 0x1a3e <DIO_u8SetPinValue+0x1c6>
    1a46:	80 95       	com	r24
    1a48:	84 23       	and	r24, r20
    1a4a:	8c 93       	st	X, r24
    1a4c:	1d c0       	rjmp	.+58     	; 0x1a88 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
    1a4e:	a2 e3       	ldi	r26, 0x32	; 50
    1a50:	b0 e0       	ldi	r27, 0x00	; 0
    1a52:	e2 e3       	ldi	r30, 0x32	; 50
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	80 81       	ld	r24, Z
    1a58:	48 2f       	mov	r20, r24
    1a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5c:	28 2f       	mov	r18, r24
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	02 2e       	mov	r0, r18
    1a66:	02 c0       	rjmp	.+4      	; 0x1a6c <DIO_u8SetPinValue+0x1f4>
    1a68:	88 0f       	add	r24, r24
    1a6a:	99 1f       	adc	r25, r25
    1a6c:	0a 94       	dec	r0
    1a6e:	e2 f7       	brpl	.-8      	; 0x1a68 <DIO_u8SetPinValue+0x1f0>
    1a70:	80 95       	com	r24
    1a72:	84 23       	and	r24, r20
    1a74:	8c 93       	st	X, r24
    1a76:	08 c0       	rjmp	.+16     	; 0x1a88 <DIO_u8SetPinValue+0x210>
			default : Local_u8ErrorState=NOK;
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	89 83       	std	Y+1, r24	; 0x01
    1a7c:	05 c0       	rjmp	.+10     	; 0x1a88 <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=NOK;
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	89 83       	std	Y+1, r24	; 0x01
    1a82:	02 c0       	rjmp	.+4      	; 0x1a88 <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=NOK;
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
    1a88:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a8a:	28 96       	adiw	r28, 0x08	; 8
    1a8c:	0f b6       	in	r0, 0x3f	; 63
    1a8e:	f8 94       	cli
    1a90:	de bf       	out	0x3e, r29	; 62
    1a92:	0f be       	out	0x3f, r0	; 63
    1a94:	cd bf       	out	0x3d, r28	; 61
    1a96:	cf 91       	pop	r28
    1a98:	df 91       	pop	r29
    1a9a:	08 95       	ret

00001a9c <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue     (u8 Copy_u8Port, u8 Copy_u8Value)
{
    1a9c:	df 93       	push	r29
    1a9e:	cf 93       	push	r28
    1aa0:	00 d0       	rcall	.+0      	; 0x1aa2 <DIO_u8SetPortValue+0x6>
    1aa2:	00 d0       	rcall	.+0      	; 0x1aa4 <DIO_u8SetPortValue+0x8>
    1aa4:	0f 92       	push	r0
    1aa6:	cd b7       	in	r28, 0x3d	; 61
    1aa8:	de b7       	in	r29, 0x3e	; 62
    1aaa:	8a 83       	std	Y+2, r24	; 0x02
    1aac:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=OK;
    1aae:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_u8Port)
    1ab0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab2:	28 2f       	mov	r18, r24
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	3d 83       	std	Y+5, r19	; 0x05
    1ab8:	2c 83       	std	Y+4, r18	; 0x04
    1aba:	8c 81       	ldd	r24, Y+4	; 0x04
    1abc:	9d 81       	ldd	r25, Y+5	; 0x05
    1abe:	81 30       	cpi	r24, 0x01	; 1
    1ac0:	91 05       	cpc	r25, r1
    1ac2:	d1 f0       	breq	.+52     	; 0x1af8 <DIO_u8SetPortValue+0x5c>
    1ac4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ac6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ac8:	22 30       	cpi	r18, 0x02	; 2
    1aca:	31 05       	cpc	r19, r1
    1acc:	2c f4       	brge	.+10     	; 0x1ad8 <DIO_u8SetPortValue+0x3c>
    1ace:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ad2:	00 97       	sbiw	r24, 0x00	; 0
    1ad4:	61 f0       	breq	.+24     	; 0x1aee <DIO_u8SetPortValue+0x52>
    1ad6:	1f c0       	rjmp	.+62     	; 0x1b16 <DIO_u8SetPortValue+0x7a>
    1ad8:	2c 81       	ldd	r18, Y+4	; 0x04
    1ada:	3d 81       	ldd	r19, Y+5	; 0x05
    1adc:	22 30       	cpi	r18, 0x02	; 2
    1ade:	31 05       	cpc	r19, r1
    1ae0:	81 f0       	breq	.+32     	; 0x1b02 <DIO_u8SetPortValue+0x66>
    1ae2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ae6:	83 30       	cpi	r24, 0x03	; 3
    1ae8:	91 05       	cpc	r25, r1
    1aea:	81 f0       	breq	.+32     	; 0x1b0c <DIO_u8SetPortValue+0x70>
    1aec:	14 c0       	rjmp	.+40     	; 0x1b16 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA: PORTA=Copy_u8Value; break;
    1aee:	eb e3       	ldi	r30, 0x3B	; 59
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	8b 81       	ldd	r24, Y+3	; 0x03
    1af4:	80 83       	st	Z, r24
    1af6:	11 c0       	rjmp	.+34     	; 0x1b1a <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB: PORTB=Copy_u8Value; break;
    1af8:	e8 e3       	ldi	r30, 0x38	; 56
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	8b 81       	ldd	r24, Y+3	; 0x03
    1afe:	80 83       	st	Z, r24
    1b00:	0c c0       	rjmp	.+24     	; 0x1b1a <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC: PORTC=Copy_u8Value; break;
    1b02:	e5 e3       	ldi	r30, 0x35	; 53
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	8b 81       	ldd	r24, Y+3	; 0x03
    1b08:	80 83       	st	Z, r24
    1b0a:	07 c0       	rjmp	.+14     	; 0x1b1a <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD: PORTD=Copy_u8Value; break;
    1b0c:	e2 e3       	ldi	r30, 0x32	; 50
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	8b 81       	ldd	r24, Y+3	; 0x03
    1b12:	80 83       	st	Z, r24
    1b14:	02 c0       	rjmp	.+4      	; 0x1b1a <DIO_u8SetPortValue+0x7e>
	default : Local_u8ErrorState=NOK;
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
    1b1a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b1c:	0f 90       	pop	r0
    1b1e:	0f 90       	pop	r0
    1b20:	0f 90       	pop	r0
    1b22:	0f 90       	pop	r0
    1b24:	0f 90       	pop	r0
    1b26:	cf 91       	pop	r28
    1b28:	df 91       	pop	r29
    1b2a:	08 95       	ret

00001b2c <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue      (u8 Copy_u8Port, u8 Copy_u8Pin , u8 *Copy_pu8Value)
{
    1b2c:	df 93       	push	r29
    1b2e:	cf 93       	push	r28
    1b30:	cd b7       	in	r28, 0x3d	; 61
    1b32:	de b7       	in	r29, 0x3e	; 62
    1b34:	27 97       	sbiw	r28, 0x07	; 7
    1b36:	0f b6       	in	r0, 0x3f	; 63
    1b38:	f8 94       	cli
    1b3a:	de bf       	out	0x3e, r29	; 62
    1b3c:	0f be       	out	0x3f, r0	; 63
    1b3e:	cd bf       	out	0x3d, r28	; 61
    1b40:	8a 83       	std	Y+2, r24	; 0x02
    1b42:	6b 83       	std	Y+3, r22	; 0x03
    1b44:	5d 83       	std	Y+5, r21	; 0x05
    1b46:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=OK;
    1b48:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_pu8Value != NULL) && (Copy_u8Pin<=DIO_u8PIN7))
    1b4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b4c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b4e:	00 97       	sbiw	r24, 0x00	; 0
    1b50:	09 f4       	brne	.+2      	; 0x1b54 <DIO_u8GetPinValue+0x28>
    1b52:	77 c0       	rjmp	.+238    	; 0x1c42 <DIO_u8GetPinValue+0x116>
    1b54:	8b 81       	ldd	r24, Y+3	; 0x03
    1b56:	88 30       	cpi	r24, 0x08	; 8
    1b58:	08 f0       	brcs	.+2      	; 0x1b5c <DIO_u8GetPinValue+0x30>
    1b5a:	73 c0       	rjmp	.+230    	; 0x1c42 <DIO_u8GetPinValue+0x116>
	{
		switch (Copy_u8Port)
    1b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5e:	28 2f       	mov	r18, r24
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	3f 83       	std	Y+7, r19	; 0x07
    1b64:	2e 83       	std	Y+6, r18	; 0x06
    1b66:	4e 81       	ldd	r20, Y+6	; 0x06
    1b68:	5f 81       	ldd	r21, Y+7	; 0x07
    1b6a:	41 30       	cpi	r20, 0x01	; 1
    1b6c:	51 05       	cpc	r21, r1
    1b6e:	59 f1       	breq	.+86     	; 0x1bc6 <DIO_u8GetPinValue+0x9a>
    1b70:	8e 81       	ldd	r24, Y+6	; 0x06
    1b72:	9f 81       	ldd	r25, Y+7	; 0x07
    1b74:	82 30       	cpi	r24, 0x02	; 2
    1b76:	91 05       	cpc	r25, r1
    1b78:	34 f4       	brge	.+12     	; 0x1b86 <DIO_u8GetPinValue+0x5a>
    1b7a:	2e 81       	ldd	r18, Y+6	; 0x06
    1b7c:	3f 81       	ldd	r19, Y+7	; 0x07
    1b7e:	21 15       	cp	r18, r1
    1b80:	31 05       	cpc	r19, r1
    1b82:	69 f0       	breq	.+26     	; 0x1b9e <DIO_u8GetPinValue+0x72>
    1b84:	5c c0       	rjmp	.+184    	; 0x1c3e <DIO_u8GetPinValue+0x112>
    1b86:	4e 81       	ldd	r20, Y+6	; 0x06
    1b88:	5f 81       	ldd	r21, Y+7	; 0x07
    1b8a:	42 30       	cpi	r20, 0x02	; 2
    1b8c:	51 05       	cpc	r21, r1
    1b8e:	79 f1       	breq	.+94     	; 0x1bee <DIO_u8GetPinValue+0xc2>
    1b90:	8e 81       	ldd	r24, Y+6	; 0x06
    1b92:	9f 81       	ldd	r25, Y+7	; 0x07
    1b94:	83 30       	cpi	r24, 0x03	; 3
    1b96:	91 05       	cpc	r25, r1
    1b98:	09 f4       	brne	.+2      	; 0x1b9c <DIO_u8GetPinValue+0x70>
    1b9a:	3d c0       	rjmp	.+122    	; 0x1c16 <DIO_u8GetPinValue+0xea>
    1b9c:	50 c0       	rjmp	.+160    	; 0x1c3e <DIO_u8GetPinValue+0x112>
		{
		case DIO_u8PORTA: *Copy_pu8Value = GET_BIT(PINA,Copy_u8Pin); break;
    1b9e:	e9 e3       	ldi	r30, 0x39	; 57
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	80 81       	ld	r24, Z
    1ba4:	28 2f       	mov	r18, r24
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    1baa:	88 2f       	mov	r24, r24
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	a9 01       	movw	r20, r18
    1bb0:	02 c0       	rjmp	.+4      	; 0x1bb6 <DIO_u8GetPinValue+0x8a>
    1bb2:	55 95       	asr	r21
    1bb4:	47 95       	ror	r20
    1bb6:	8a 95       	dec	r24
    1bb8:	e2 f7       	brpl	.-8      	; 0x1bb2 <DIO_u8GetPinValue+0x86>
    1bba:	ca 01       	movw	r24, r20
    1bbc:	81 70       	andi	r24, 0x01	; 1
    1bbe:	ec 81       	ldd	r30, Y+4	; 0x04
    1bc0:	fd 81       	ldd	r31, Y+5	; 0x05
    1bc2:	80 83       	st	Z, r24
    1bc4:	3e c0       	rjmp	.+124    	; 0x1c42 <DIO_u8GetPinValue+0x116>
		case DIO_u8PORTB: *Copy_pu8Value = GET_BIT(PINB,Copy_u8Pin); break;
    1bc6:	e6 e3       	ldi	r30, 0x36	; 54
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	80 81       	ld	r24, Z
    1bcc:	28 2f       	mov	r18, r24
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd2:	88 2f       	mov	r24, r24
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	a9 01       	movw	r20, r18
    1bd8:	02 c0       	rjmp	.+4      	; 0x1bde <DIO_u8GetPinValue+0xb2>
    1bda:	55 95       	asr	r21
    1bdc:	47 95       	ror	r20
    1bde:	8a 95       	dec	r24
    1be0:	e2 f7       	brpl	.-8      	; 0x1bda <DIO_u8GetPinValue+0xae>
    1be2:	ca 01       	movw	r24, r20
    1be4:	81 70       	andi	r24, 0x01	; 1
    1be6:	ec 81       	ldd	r30, Y+4	; 0x04
    1be8:	fd 81       	ldd	r31, Y+5	; 0x05
    1bea:	80 83       	st	Z, r24
    1bec:	2a c0       	rjmp	.+84     	; 0x1c42 <DIO_u8GetPinValue+0x116>
		case DIO_u8PORTC: *Copy_pu8Value = GET_BIT(PINC,Copy_u8Pin); break;
    1bee:	e3 e3       	ldi	r30, 0x33	; 51
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	80 81       	ld	r24, Z
    1bf4:	28 2f       	mov	r18, r24
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfa:	88 2f       	mov	r24, r24
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	a9 01       	movw	r20, r18
    1c00:	02 c0       	rjmp	.+4      	; 0x1c06 <DIO_u8GetPinValue+0xda>
    1c02:	55 95       	asr	r21
    1c04:	47 95       	ror	r20
    1c06:	8a 95       	dec	r24
    1c08:	e2 f7       	brpl	.-8      	; 0x1c02 <DIO_u8GetPinValue+0xd6>
    1c0a:	ca 01       	movw	r24, r20
    1c0c:	81 70       	andi	r24, 0x01	; 1
    1c0e:	ec 81       	ldd	r30, Y+4	; 0x04
    1c10:	fd 81       	ldd	r31, Y+5	; 0x05
    1c12:	80 83       	st	Z, r24
    1c14:	16 c0       	rjmp	.+44     	; 0x1c42 <DIO_u8GetPinValue+0x116>
		case DIO_u8PORTD: *Copy_pu8Value = GET_BIT(PIND,Copy_u8Pin); break;
    1c16:	e0 e3       	ldi	r30, 0x30	; 48
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	28 2f       	mov	r18, r24
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	8b 81       	ldd	r24, Y+3	; 0x03
    1c22:	88 2f       	mov	r24, r24
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	a9 01       	movw	r20, r18
    1c28:	02 c0       	rjmp	.+4      	; 0x1c2e <DIO_u8GetPinValue+0x102>
    1c2a:	55 95       	asr	r21
    1c2c:	47 95       	ror	r20
    1c2e:	8a 95       	dec	r24
    1c30:	e2 f7       	brpl	.-8      	; 0x1c2a <DIO_u8GetPinValue+0xfe>
    1c32:	ca 01       	movw	r24, r20
    1c34:	81 70       	andi	r24, 0x01	; 1
    1c36:	ec 81       	ldd	r30, Y+4	; 0x04
    1c38:	fd 81       	ldd	r31, Y+5	; 0x05
    1c3a:	80 83       	st	Z, r24
    1c3c:	02 c0       	rjmp	.+4      	; 0x1c42 <DIO_u8GetPinValue+0x116>
		default : Local_u8ErrorState=NOK;
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return Local_u8ErrorState ;
    1c42:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c44:	27 96       	adiw	r28, 0x07	; 7
    1c46:	0f b6       	in	r0, 0x3f	; 63
    1c48:	f8 94       	cli
    1c4a:	de bf       	out	0x3e, r29	; 62
    1c4c:	0f be       	out	0x3f, r0	; 63
    1c4e:	cd bf       	out	0x3d, r28	; 61
    1c50:	cf 91       	pop	r28
    1c52:	df 91       	pop	r29
    1c54:	08 95       	ret

00001c56 <KPD_u8GetPressedKey>:
#include "KPD_config.h"
#include "KPD_interface.h"
#include "KPD_private.h"

u8 KPD_u8GetPressedKey(void)
{
    1c56:	df 93       	push	r29
    1c58:	cf 93       	push	r28
    1c5a:	cd b7       	in	r28, 0x3d	; 61
    1c5c:	de b7       	in	r29, 0x3e	; 62
    1c5e:	a2 97       	sbiw	r28, 0x22	; 34
    1c60:	0f b6       	in	r0, 0x3f	; 63
    1c62:	f8 94       	cli
    1c64:	de bf       	out	0x3e, r29	; 62
    1c66:	0f be       	out	0x3f, r0	; 63
    1c68:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8ColIdx , Local_u8RowIdx , Local_u8PressedKey=NO_PRESSED_KEY,Local_u8PinState;
    1c6a:	8f ef       	ldi	r24, 0xFF	; 255
    1c6c:	89 83       	std	Y+1, r24	; 0x01
	u8 Local_KPDArr[ROW_NUMBER][COULMN_NUMBER]=KPD_BUTTONS_VAL;
    1c6e:	ce 01       	movw	r24, r28
    1c70:	05 96       	adiw	r24, 0x05	; 5
    1c72:	9f 8f       	std	Y+31, r25	; 0x1f
    1c74:	8e 8f       	std	Y+30, r24	; 0x1e
    1c76:	e6 ea       	ldi	r30, 0xA6	; 166
    1c78:	f1 e0       	ldi	r31, 0x01	; 1
    1c7a:	f9 a3       	std	Y+33, r31	; 0x21
    1c7c:	e8 a3       	std	Y+32, r30	; 0x20
    1c7e:	f0 e1       	ldi	r31, 0x10	; 16
    1c80:	fa a3       	std	Y+34, r31	; 0x22
    1c82:	e8 a1       	ldd	r30, Y+32	; 0x20
    1c84:	f9 a1       	ldd	r31, Y+33	; 0x21
    1c86:	00 80       	ld	r0, Z
    1c88:	88 a1       	ldd	r24, Y+32	; 0x20
    1c8a:	99 a1       	ldd	r25, Y+33	; 0x21
    1c8c:	01 96       	adiw	r24, 0x01	; 1
    1c8e:	99 a3       	std	Y+33, r25	; 0x21
    1c90:	88 a3       	std	Y+32, r24	; 0x20
    1c92:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1c94:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1c96:	00 82       	st	Z, r0
    1c98:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c9a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1c9c:	01 96       	adiw	r24, 0x01	; 1
    1c9e:	9f 8f       	std	Y+31, r25	; 0x1f
    1ca0:	8e 8f       	std	Y+30, r24	; 0x1e
    1ca2:	9a a1       	ldd	r25, Y+34	; 0x22
    1ca4:	91 50       	subi	r25, 0x01	; 1
    1ca6:	9a a3       	std	Y+34, r25	; 0x22
    1ca8:	ea a1       	ldd	r30, Y+34	; 0x22
    1caa:	ee 23       	and	r30, r30
    1cac:	51 f7       	brne	.-44     	; 0x1c82 <KPD_u8GetPressedKey+0x2c>
	u8 Local_COLArr[COULMN_NUMBER]={COULMN_PIN0,COULMN_PIN1,COULMN_PIN2,COULMN_PIN3};
    1cae:	1d 8a       	std	Y+21, r1	; 0x15
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	8e 8b       	std	Y+22, r24	; 0x16
    1cb4:	82 e0       	ldi	r24, 0x02	; 2
    1cb6:	8f 8b       	std	Y+23, r24	; 0x17
    1cb8:	83 e0       	ldi	r24, 0x03	; 3
    1cba:	88 8f       	std	Y+24, r24	; 0x18
	u8 Local_ROWArr[ROW_NUMBER]={ROW_PIN0,ROW_PIN1,ROW_PIN2,ROW_PIN3};
    1cbc:	84 e0       	ldi	r24, 0x04	; 4
    1cbe:	89 8f       	std	Y+25, r24	; 0x19
    1cc0:	85 e0       	ldi	r24, 0x05	; 5
    1cc2:	8a 8f       	std	Y+26, r24	; 0x1a
    1cc4:	86 e0       	ldi	r24, 0x06	; 6
    1cc6:	8b 8f       	std	Y+27, r24	; 0x1b
    1cc8:	87 e0       	ldi	r24, 0x07	; 7
    1cca:	8c 8f       	std	Y+28, r24	; 0x1c

	for(Local_u8ColIdx=0;Local_u8ColIdx<COULMN_NUMBER;Local_u8ColIdx++)
    1ccc:	1b 82       	std	Y+3, r1	; 0x03
    1cce:	76 c0       	rjmp	.+236    	; 0x1dbc <KPD_u8GetPressedKey+0x166>
	{
		DIO_u8SetPinValue(KPD_PORT,Local_COLArr[Local_u8ColIdx],DIO_u8PIN_LOW);
    1cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd2:	28 2f       	mov	r18, r24
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	ce 01       	movw	r24, r28
    1cd8:	45 96       	adiw	r24, 0x15	; 21
    1cda:	fc 01       	movw	r30, r24
    1cdc:	e2 0f       	add	r30, r18
    1cde:	f3 1f       	adc	r31, r19
    1ce0:	90 81       	ld	r25, Z
    1ce2:	82 e0       	ldi	r24, 0x02	; 2
    1ce4:	69 2f       	mov	r22, r25
    1ce6:	40 e0       	ldi	r20, 0x00	; 0
    1ce8:	0e 94 3c 0c 	call	0x1878	; 0x1878 <DIO_u8SetPinValue>


		for(Local_u8RowIdx=0;Local_u8RowIdx<ROW_NUMBER;Local_u8RowIdx++)
    1cec:	1a 82       	std	Y+2, r1	; 0x02
    1cee:	51 c0       	rjmp	.+162    	; 0x1d92 <KPD_u8GetPressedKey+0x13c>
		{
			DIO_u8GetPinValue(KPD_PORT,Local_ROWArr[Local_u8RowIdx],&Local_u8PinState);
    1cf0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf2:	28 2f       	mov	r18, r24
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	ce 01       	movw	r24, r28
    1cf8:	49 96       	adiw	r24, 0x19	; 25
    1cfa:	fc 01       	movw	r30, r24
    1cfc:	e2 0f       	add	r30, r18
    1cfe:	f3 1f       	adc	r31, r19
    1d00:	90 81       	ld	r25, Z
    1d02:	9e 01       	movw	r18, r28
    1d04:	2c 5f       	subi	r18, 0xFC	; 252
    1d06:	3f 4f       	sbci	r19, 0xFF	; 255
    1d08:	82 e0       	ldi	r24, 0x02	; 2
    1d0a:	69 2f       	mov	r22, r25
    1d0c:	a9 01       	movw	r20, r18
    1d0e:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <DIO_u8GetPinValue>


			if(Local_u8PinState==DIO_u8PIN_LOW)
    1d12:	8c 81       	ldd	r24, Y+4	; 0x04
    1d14:	88 23       	and	r24, r24
    1d16:	d1 f5       	brne	.+116    	; 0x1d8c <KPD_u8GetPressedKey+0x136>
    1d18:	11 c0       	rjmp	.+34     	; 0x1d3c <KPD_u8GetPressedKey+0xe6>
			{
				while(Local_u8PinState==DIO_u8PIN_LOW)
				{
					DIO_u8GetPinValue(KPD_PORT,Local_ROWArr[Local_u8RowIdx],&Local_u8PinState);
    1d1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1c:	28 2f       	mov	r18, r24
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	ce 01       	movw	r24, r28
    1d22:	49 96       	adiw	r24, 0x19	; 25
    1d24:	fc 01       	movw	r30, r24
    1d26:	e2 0f       	add	r30, r18
    1d28:	f3 1f       	adc	r31, r19
    1d2a:	90 81       	ld	r25, Z
    1d2c:	9e 01       	movw	r18, r28
    1d2e:	2c 5f       	subi	r18, 0xFC	; 252
    1d30:	3f 4f       	sbci	r19, 0xFF	; 255
    1d32:	82 e0       	ldi	r24, 0x02	; 2
    1d34:	69 2f       	mov	r22, r25
    1d36:	a9 01       	movw	r20, r18
    1d38:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <DIO_u8GetPinValue>
			DIO_u8GetPinValue(KPD_PORT,Local_ROWArr[Local_u8RowIdx],&Local_u8PinState);


			if(Local_u8PinState==DIO_u8PIN_LOW)
			{
				while(Local_u8PinState==DIO_u8PIN_LOW)
    1d3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d3e:	88 23       	and	r24, r24
    1d40:	61 f3       	breq	.-40     	; 0x1d1a <KPD_u8GetPressedKey+0xc4>
				{
					DIO_u8GetPinValue(KPD_PORT,Local_ROWArr[Local_u8RowIdx],&Local_u8PinState);
				}
				Local_u8PressedKey=Local_KPDArr[Local_u8RowIdx][Local_u8ColIdx];
    1d42:	8a 81       	ldd	r24, Y+2	; 0x02
    1d44:	28 2f       	mov	r18, r24
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4a:	48 2f       	mov	r20, r24
    1d4c:	50 e0       	ldi	r21, 0x00	; 0
    1d4e:	22 0f       	add	r18, r18
    1d50:	33 1f       	adc	r19, r19
    1d52:	22 0f       	add	r18, r18
    1d54:	33 1f       	adc	r19, r19
    1d56:	ce 01       	movw	r24, r28
    1d58:	01 96       	adiw	r24, 0x01	; 1
    1d5a:	82 0f       	add	r24, r18
    1d5c:	93 1f       	adc	r25, r19
    1d5e:	84 0f       	add	r24, r20
    1d60:	95 1f       	adc	r25, r21
    1d62:	fc 01       	movw	r30, r24
    1d64:	34 96       	adiw	r30, 0x04	; 4
    1d66:	80 81       	ld	r24, Z
    1d68:	89 83       	std	Y+1, r24	; 0x01
				DIO_u8SetPinValue(KPD_PORT,Local_COLArr[Local_u8ColIdx],DIO_u8PIN_HIGH);
    1d6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6c:	28 2f       	mov	r18, r24
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	ce 01       	movw	r24, r28
    1d72:	45 96       	adiw	r24, 0x15	; 21
    1d74:	fc 01       	movw	r30, r24
    1d76:	e2 0f       	add	r30, r18
    1d78:	f3 1f       	adc	r31, r19
    1d7a:	90 81       	ld	r25, Z
    1d7c:	82 e0       	ldi	r24, 0x02	; 2
    1d7e:	69 2f       	mov	r22, r25
    1d80:	41 e0       	ldi	r20, 0x01	; 1
    1d82:	0e 94 3c 0c 	call	0x1878	; 0x1878 <DIO_u8SetPinValue>
				return Local_u8PressedKey;
    1d86:	f9 81       	ldd	r31, Y+1	; 0x01
    1d88:	fd 8f       	std	Y+29, r31	; 0x1d
    1d8a:	1e c0       	rjmp	.+60     	; 0x1dc8 <KPD_u8GetPressedKey+0x172>
	for(Local_u8ColIdx=0;Local_u8ColIdx<COULMN_NUMBER;Local_u8ColIdx++)
	{
		DIO_u8SetPinValue(KPD_PORT,Local_COLArr[Local_u8ColIdx],DIO_u8PIN_LOW);


		for(Local_u8RowIdx=0;Local_u8RowIdx<ROW_NUMBER;Local_u8RowIdx++)
    1d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8e:	8f 5f       	subi	r24, 0xFF	; 255
    1d90:	8a 83       	std	Y+2, r24	; 0x02
    1d92:	8a 81       	ldd	r24, Y+2	; 0x02
    1d94:	84 30       	cpi	r24, 0x04	; 4
    1d96:	08 f4       	brcc	.+2      	; 0x1d9a <KPD_u8GetPressedKey+0x144>
    1d98:	ab cf       	rjmp	.-170    	; 0x1cf0 <KPD_u8GetPressedKey+0x9a>
				Local_u8PressedKey=Local_KPDArr[Local_u8RowIdx][Local_u8ColIdx];
				DIO_u8SetPinValue(KPD_PORT,Local_COLArr[Local_u8ColIdx],DIO_u8PIN_HIGH);
				return Local_u8PressedKey;
			}
		}
		DIO_u8SetPinValue(KPD_PORT,Local_COLArr[Local_u8ColIdx],DIO_u8PIN_HIGH);
    1d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9c:	28 2f       	mov	r18, r24
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	ce 01       	movw	r24, r28
    1da2:	45 96       	adiw	r24, 0x15	; 21
    1da4:	fc 01       	movw	r30, r24
    1da6:	e2 0f       	add	r30, r18
    1da8:	f3 1f       	adc	r31, r19
    1daa:	90 81       	ld	r25, Z
    1dac:	82 e0       	ldi	r24, 0x02	; 2
    1dae:	69 2f       	mov	r22, r25
    1db0:	41 e0       	ldi	r20, 0x01	; 1
    1db2:	0e 94 3c 0c 	call	0x1878	; 0x1878 <DIO_u8SetPinValue>
	u8 Local_u8ColIdx , Local_u8RowIdx , Local_u8PressedKey=NO_PRESSED_KEY,Local_u8PinState;
	u8 Local_KPDArr[ROW_NUMBER][COULMN_NUMBER]=KPD_BUTTONS_VAL;
	u8 Local_COLArr[COULMN_NUMBER]={COULMN_PIN0,COULMN_PIN1,COULMN_PIN2,COULMN_PIN3};
	u8 Local_ROWArr[ROW_NUMBER]={ROW_PIN0,ROW_PIN1,ROW_PIN2,ROW_PIN3};

	for(Local_u8ColIdx=0;Local_u8ColIdx<COULMN_NUMBER;Local_u8ColIdx++)
    1db6:	8b 81       	ldd	r24, Y+3	; 0x03
    1db8:	8f 5f       	subi	r24, 0xFF	; 255
    1dba:	8b 83       	std	Y+3, r24	; 0x03
    1dbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dbe:	84 30       	cpi	r24, 0x04	; 4
    1dc0:	08 f4       	brcc	.+2      	; 0x1dc4 <KPD_u8GetPressedKey+0x16e>
    1dc2:	86 cf       	rjmp	.-244    	; 0x1cd0 <KPD_u8GetPressedKey+0x7a>
			}
		}
		DIO_u8SetPinValue(KPD_PORT,Local_COLArr[Local_u8ColIdx],DIO_u8PIN_HIGH);
	}

	return Local_u8PressedKey;
    1dc4:	89 81       	ldd	r24, Y+1	; 0x01
    1dc6:	8d 8f       	std	Y+29, r24	; 0x1d
    1dc8:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    1dca:	a2 96       	adiw	r28, 0x22	; 34
    1dcc:	0f b6       	in	r0, 0x3f	; 63
    1dce:	f8 94       	cli
    1dd0:	de bf       	out	0x3e, r29	; 62
    1dd2:	0f be       	out	0x3f, r0	; 63
    1dd4:	cd bf       	out	0x3d, r28	; 61
    1dd6:	cf 91       	pop	r28
    1dd8:	df 91       	pop	r29
    1dda:	08 95       	ret

00001ddc <CLCD_voidSendCommand>:
#include"CLCD_config.h"



void CLCD_voidSendCommand (u8 Copy_u8Command)
{
    1ddc:	df 93       	push	r29
    1dde:	cf 93       	push	r28
    1de0:	cd b7       	in	r28, 0x3d	; 61
    1de2:	de b7       	in	r29, 0x3e	; 62
    1de4:	2f 97       	sbiw	r28, 0x0f	; 15
    1de6:	0f b6       	in	r0, 0x3f	; 63
    1de8:	f8 94       	cli
    1dea:	de bf       	out	0x3e, r29	; 62
    1dec:	0f be       	out	0x3f, r0	; 63
    1dee:	cd bf       	out	0x3d, r28	; 61
    1df0:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	65 e0       	ldi	r22, 0x05	; 5
    1df6:	40 e0       	ldi	r20, 0x00	; 0
    1df8:	0e 94 3c 0c 	call	0x1878	; 0x1878 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
    1dfc:	81 e0       	ldi	r24, 0x01	; 1
    1dfe:	66 e0       	ldi	r22, 0x06	; 6
    1e00:	40 e0       	ldi	r20, 0x00	; 0
    1e02:	0e 94 3c 0c 	call	0x1878	; 0x1878 <DIO_u8SetPinValue>
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Command);
    1e06:	80 e0       	ldi	r24, 0x00	; 0
    1e08:	6f 85       	ldd	r22, Y+15	; 0x0f
    1e0a:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <DIO_u8SetPortValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	67 e0       	ldi	r22, 0x07	; 7
    1e12:	41 e0       	ldi	r20, 0x01	; 1
    1e14:	0e 94 3c 0c 	call	0x1878	; 0x1878 <DIO_u8SetPinValue>
    1e18:	80 e0       	ldi	r24, 0x00	; 0
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	a0 e0       	ldi	r26, 0x00	; 0
    1e1e:	b0 e4       	ldi	r27, 0x40	; 64
    1e20:	8b 87       	std	Y+11, r24	; 0x0b
    1e22:	9c 87       	std	Y+12, r25	; 0x0c
    1e24:	ad 87       	std	Y+13, r26	; 0x0d
    1e26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e28:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	4a ef       	ldi	r20, 0xFA	; 250
    1e36:	54 e4       	ldi	r21, 0x44	; 68
    1e38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	cb 01       	movw	r24, r22
    1e40:	8f 83       	std	Y+7, r24	; 0x07
    1e42:	98 87       	std	Y+8, r25	; 0x08
    1e44:	a9 87       	std	Y+9, r26	; 0x09
    1e46:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e48:	6f 81       	ldd	r22, Y+7	; 0x07
    1e4a:	78 85       	ldd	r23, Y+8	; 0x08
    1e4c:	89 85       	ldd	r24, Y+9	; 0x09
    1e4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	40 e8       	ldi	r20, 0x80	; 128
    1e56:	5f e3       	ldi	r21, 0x3F	; 63
    1e58:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e5c:	88 23       	and	r24, r24
    1e5e:	2c f4       	brge	.+10     	; 0x1e6a <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
    1e60:	81 e0       	ldi	r24, 0x01	; 1
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	9e 83       	std	Y+6, r25	; 0x06
    1e66:	8d 83       	std	Y+5, r24	; 0x05
    1e68:	3f c0       	rjmp	.+126    	; 0x1ee8 <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    1e6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e6c:	78 85       	ldd	r23, Y+8	; 0x08
    1e6e:	89 85       	ldd	r24, Y+9	; 0x09
    1e70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e72:	20 e0       	ldi	r18, 0x00	; 0
    1e74:	3f ef       	ldi	r19, 0xFF	; 255
    1e76:	4f e7       	ldi	r20, 0x7F	; 127
    1e78:	57 e4       	ldi	r21, 0x47	; 71
    1e7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e7e:	18 16       	cp	r1, r24
    1e80:	4c f5       	brge	.+82     	; 0x1ed4 <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e82:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e84:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e86:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e88:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e8a:	20 e0       	ldi	r18, 0x00	; 0
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	40 e2       	ldi	r20, 0x20	; 32
    1e90:	51 e4       	ldi	r21, 0x41	; 65
    1e92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e96:	dc 01       	movw	r26, r24
    1e98:	cb 01       	movw	r24, r22
    1e9a:	bc 01       	movw	r22, r24
    1e9c:	cd 01       	movw	r24, r26
    1e9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea2:	dc 01       	movw	r26, r24
    1ea4:	cb 01       	movw	r24, r22
    1ea6:	9e 83       	std	Y+6, r25	; 0x06
    1ea8:	8d 83       	std	Y+5, r24	; 0x05
    1eaa:	0f c0       	rjmp	.+30     	; 0x1eca <CLCD_voidSendCommand+0xee>
    1eac:	88 ec       	ldi	r24, 0xC8	; 200
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	9c 83       	std	Y+4, r25	; 0x04
    1eb2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1eb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb8:	01 97       	sbiw	r24, 0x01	; 1
    1eba:	f1 f7       	brne	.-4      	; 0x1eb8 <CLCD_voidSendCommand+0xdc>
    1ebc:	9c 83       	std	Y+4, r25	; 0x04
    1ebe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ec0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec4:	01 97       	sbiw	r24, 0x01	; 1
    1ec6:	9e 83       	std	Y+6, r25	; 0x06
    1ec8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eca:	8d 81       	ldd	r24, Y+5	; 0x05
    1ecc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ece:	00 97       	sbiw	r24, 0x00	; 0
    1ed0:	69 f7       	brne	.-38     	; 0x1eac <CLCD_voidSendCommand+0xd0>
    1ed2:	14 c0       	rjmp	.+40     	; 0x1efc <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ed4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed6:	78 85       	ldd	r23, Y+8	; 0x08
    1ed8:	89 85       	ldd	r24, Y+9	; 0x09
    1eda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1edc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	9e 83       	std	Y+6, r25	; 0x06
    1ee6:	8d 83       	std	Y+5, r24	; 0x05
    1ee8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eea:	9e 81       	ldd	r25, Y+6	; 0x06
    1eec:	9a 83       	std	Y+2, r25	; 0x02
    1eee:	89 83       	std	Y+1, r24	; 0x01
    1ef0:	89 81       	ldd	r24, Y+1	; 0x01
    1ef2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef4:	01 97       	sbiw	r24, 0x01	; 1
    1ef6:	f1 f7       	brne	.-4      	; 0x1ef4 <CLCD_voidSendCommand+0x118>
    1ef8:	9a 83       	std	Y+2, r25	; 0x02
    1efa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1efc:	81 e0       	ldi	r24, 0x01	; 1
    1efe:	67 e0       	ldi	r22, 0x07	; 7
    1f00:	40 e0       	ldi	r20, 0x00	; 0
    1f02:	0e 94 3c 0c 	call	0x1878	; 0x1878 <DIO_u8SetPinValue>
}
    1f06:	2f 96       	adiw	r28, 0x0f	; 15
    1f08:	0f b6       	in	r0, 0x3f	; 63
    1f0a:	f8 94       	cli
    1f0c:	de bf       	out	0x3e, r29	; 62
    1f0e:	0f be       	out	0x3f, r0	; 63
    1f10:	cd bf       	out	0x3d, r28	; 61
    1f12:	cf 91       	pop	r28
    1f14:	df 91       	pop	r29
    1f16:	08 95       	ret

00001f18 <CLCD_voidSendData>:
void CLCD_voidSendData (u8 Copy_u8Data)
{
    1f18:	df 93       	push	r29
    1f1a:	cf 93       	push	r28
    1f1c:	cd b7       	in	r28, 0x3d	; 61
    1f1e:	de b7       	in	r29, 0x3e	; 62
    1f20:	2f 97       	sbiw	r28, 0x0f	; 15
    1f22:	0f b6       	in	r0, 0x3f	; 63
    1f24:	f8 94       	cli
    1f26:	de bf       	out	0x3e, r29	; 62
    1f28:	0f be       	out	0x3f, r0	; 63
    1f2a:	cd bf       	out	0x3d, r28	; 61
    1f2c:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	65 e0       	ldi	r22, 0x05	; 5
    1f32:	41 e0       	ldi	r20, 0x01	; 1
    1f34:	0e 94 3c 0c 	call	0x1878	; 0x1878 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	66 e0       	ldi	r22, 0x06	; 6
    1f3c:	40 e0       	ldi	r20, 0x00	; 0
    1f3e:	0e 94 3c 0c 	call	0x1878	; 0x1878 <DIO_u8SetPinValue>
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Data);
    1f42:	80 e0       	ldi	r24, 0x00	; 0
    1f44:	6f 85       	ldd	r22, Y+15	; 0x0f
    1f46:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <DIO_u8SetPortValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	67 e0       	ldi	r22, 0x07	; 7
    1f4e:	41 e0       	ldi	r20, 0x01	; 1
    1f50:	0e 94 3c 0c 	call	0x1878	; 0x1878 <DIO_u8SetPinValue>
    1f54:	80 e0       	ldi	r24, 0x00	; 0
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	a0 e0       	ldi	r26, 0x00	; 0
    1f5a:	b0 e4       	ldi	r27, 0x40	; 64
    1f5c:	8b 87       	std	Y+11, r24	; 0x0b
    1f5e:	9c 87       	std	Y+12, r25	; 0x0c
    1f60:	ad 87       	std	Y+13, r26	; 0x0d
    1f62:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f64:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f66:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f68:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f6c:	20 e0       	ldi	r18, 0x00	; 0
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	4a ef       	ldi	r20, 0xFA	; 250
    1f72:	54 e4       	ldi	r21, 0x44	; 68
    1f74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f78:	dc 01       	movw	r26, r24
    1f7a:	cb 01       	movw	r24, r22
    1f7c:	8f 83       	std	Y+7, r24	; 0x07
    1f7e:	98 87       	std	Y+8, r25	; 0x08
    1f80:	a9 87       	std	Y+9, r26	; 0x09
    1f82:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f84:	6f 81       	ldd	r22, Y+7	; 0x07
    1f86:	78 85       	ldd	r23, Y+8	; 0x08
    1f88:	89 85       	ldd	r24, Y+9	; 0x09
    1f8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	40 e8       	ldi	r20, 0x80	; 128
    1f92:	5f e3       	ldi	r21, 0x3F	; 63
    1f94:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f98:	88 23       	and	r24, r24
    1f9a:	2c f4       	brge	.+10     	; 0x1fa6 <CLCD_voidSendData+0x8e>
		__ticks = 1;
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	9e 83       	std	Y+6, r25	; 0x06
    1fa2:	8d 83       	std	Y+5, r24	; 0x05
    1fa4:	3f c0       	rjmp	.+126    	; 0x2024 <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    1fa6:	6f 81       	ldd	r22, Y+7	; 0x07
    1fa8:	78 85       	ldd	r23, Y+8	; 0x08
    1faa:	89 85       	ldd	r24, Y+9	; 0x09
    1fac:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fae:	20 e0       	ldi	r18, 0x00	; 0
    1fb0:	3f ef       	ldi	r19, 0xFF	; 255
    1fb2:	4f e7       	ldi	r20, 0x7F	; 127
    1fb4:	57 e4       	ldi	r21, 0x47	; 71
    1fb6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fba:	18 16       	cp	r1, r24
    1fbc:	4c f5       	brge	.+82     	; 0x2010 <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fbe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fc0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	40 e2       	ldi	r20, 0x20	; 32
    1fcc:	51 e4       	ldi	r21, 0x41	; 65
    1fce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	bc 01       	movw	r22, r24
    1fd8:	cd 01       	movw	r24, r26
    1fda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fde:	dc 01       	movw	r26, r24
    1fe0:	cb 01       	movw	r24, r22
    1fe2:	9e 83       	std	Y+6, r25	; 0x06
    1fe4:	8d 83       	std	Y+5, r24	; 0x05
    1fe6:	0f c0       	rjmp	.+30     	; 0x2006 <CLCD_voidSendData+0xee>
    1fe8:	88 ec       	ldi	r24, 0xC8	; 200
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	9c 83       	std	Y+4, r25	; 0x04
    1fee:	8b 83       	std	Y+3, r24	; 0x03
    1ff0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff4:	01 97       	sbiw	r24, 0x01	; 1
    1ff6:	f1 f7       	brne	.-4      	; 0x1ff4 <CLCD_voidSendData+0xdc>
    1ff8:	9c 83       	std	Y+4, r25	; 0x04
    1ffa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ffc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ffe:	9e 81       	ldd	r25, Y+6	; 0x06
    2000:	01 97       	sbiw	r24, 0x01	; 1
    2002:	9e 83       	std	Y+6, r25	; 0x06
    2004:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2006:	8d 81       	ldd	r24, Y+5	; 0x05
    2008:	9e 81       	ldd	r25, Y+6	; 0x06
    200a:	00 97       	sbiw	r24, 0x00	; 0
    200c:	69 f7       	brne	.-38     	; 0x1fe8 <CLCD_voidSendData+0xd0>
    200e:	14 c0       	rjmp	.+40     	; 0x2038 <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2010:	6f 81       	ldd	r22, Y+7	; 0x07
    2012:	78 85       	ldd	r23, Y+8	; 0x08
    2014:	89 85       	ldd	r24, Y+9	; 0x09
    2016:	9a 85       	ldd	r25, Y+10	; 0x0a
    2018:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    201c:	dc 01       	movw	r26, r24
    201e:	cb 01       	movw	r24, r22
    2020:	9e 83       	std	Y+6, r25	; 0x06
    2022:	8d 83       	std	Y+5, r24	; 0x05
    2024:	8d 81       	ldd	r24, Y+5	; 0x05
    2026:	9e 81       	ldd	r25, Y+6	; 0x06
    2028:	9a 83       	std	Y+2, r25	; 0x02
    202a:	89 83       	std	Y+1, r24	; 0x01
    202c:	89 81       	ldd	r24, Y+1	; 0x01
    202e:	9a 81       	ldd	r25, Y+2	; 0x02
    2030:	01 97       	sbiw	r24, 0x01	; 1
    2032:	f1 f7       	brne	.-4      	; 0x2030 <CLCD_voidSendData+0x118>
    2034:	9a 83       	std	Y+2, r25	; 0x02
    2036:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	67 e0       	ldi	r22, 0x07	; 7
    203c:	40 e0       	ldi	r20, 0x00	; 0
    203e:	0e 94 3c 0c 	call	0x1878	; 0x1878 <DIO_u8SetPinValue>
}
    2042:	2f 96       	adiw	r28, 0x0f	; 15
    2044:	0f b6       	in	r0, 0x3f	; 63
    2046:	f8 94       	cli
    2048:	de bf       	out	0x3e, r29	; 62
    204a:	0f be       	out	0x3f, r0	; 63
    204c:	cd bf       	out	0x3d, r28	; 61
    204e:	cf 91       	pop	r28
    2050:	df 91       	pop	r29
    2052:	08 95       	ret

00002054 <CLCD_voidInit>:
void CLCD_voidInit     (void)
{
    2054:	df 93       	push	r29
    2056:	cf 93       	push	r28
    2058:	cd b7       	in	r28, 0x3d	; 61
    205a:	de b7       	in	r29, 0x3e	; 62
    205c:	2e 97       	sbiw	r28, 0x0e	; 14
    205e:	0f b6       	in	r0, 0x3f	; 63
    2060:	f8 94       	cli
    2062:	de bf       	out	0x3e, r29	; 62
    2064:	0f be       	out	0x3f, r0	; 63
    2066:	cd bf       	out	0x3d, r28	; 61
    2068:	80 e0       	ldi	r24, 0x00	; 0
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	a0 e2       	ldi	r26, 0x20	; 32
    206e:	b2 e4       	ldi	r27, 0x42	; 66
    2070:	8b 87       	std	Y+11, r24	; 0x0b
    2072:	9c 87       	std	Y+12, r25	; 0x0c
    2074:	ad 87       	std	Y+13, r26	; 0x0d
    2076:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2078:	6b 85       	ldd	r22, Y+11	; 0x0b
    207a:	7c 85       	ldd	r23, Y+12	; 0x0c
    207c:	8d 85       	ldd	r24, Y+13	; 0x0d
    207e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2080:	20 e0       	ldi	r18, 0x00	; 0
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	4a ef       	ldi	r20, 0xFA	; 250
    2086:	54 e4       	ldi	r21, 0x44	; 68
    2088:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    208c:	dc 01       	movw	r26, r24
    208e:	cb 01       	movw	r24, r22
    2090:	8f 83       	std	Y+7, r24	; 0x07
    2092:	98 87       	std	Y+8, r25	; 0x08
    2094:	a9 87       	std	Y+9, r26	; 0x09
    2096:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2098:	6f 81       	ldd	r22, Y+7	; 0x07
    209a:	78 85       	ldd	r23, Y+8	; 0x08
    209c:	89 85       	ldd	r24, Y+9	; 0x09
    209e:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	40 e8       	ldi	r20, 0x80	; 128
    20a6:	5f e3       	ldi	r21, 0x3F	; 63
    20a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20ac:	88 23       	and	r24, r24
    20ae:	2c f4       	brge	.+10     	; 0x20ba <CLCD_voidInit+0x66>
		__ticks = 1;
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	9e 83       	std	Y+6, r25	; 0x06
    20b6:	8d 83       	std	Y+5, r24	; 0x05
    20b8:	3f c0       	rjmp	.+126    	; 0x2138 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    20ba:	6f 81       	ldd	r22, Y+7	; 0x07
    20bc:	78 85       	ldd	r23, Y+8	; 0x08
    20be:	89 85       	ldd	r24, Y+9	; 0x09
    20c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c2:	20 e0       	ldi	r18, 0x00	; 0
    20c4:	3f ef       	ldi	r19, 0xFF	; 255
    20c6:	4f e7       	ldi	r20, 0x7F	; 127
    20c8:	57 e4       	ldi	r21, 0x47	; 71
    20ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20ce:	18 16       	cp	r1, r24
    20d0:	4c f5       	brge	.+82     	; 0x2124 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    20d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    20d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    20d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    20da:	20 e0       	ldi	r18, 0x00	; 0
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	40 e2       	ldi	r20, 0x20	; 32
    20e0:	51 e4       	ldi	r21, 0x41	; 65
    20e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e6:	dc 01       	movw	r26, r24
    20e8:	cb 01       	movw	r24, r22
    20ea:	bc 01       	movw	r22, r24
    20ec:	cd 01       	movw	r24, r26
    20ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f2:	dc 01       	movw	r26, r24
    20f4:	cb 01       	movw	r24, r22
    20f6:	9e 83       	std	Y+6, r25	; 0x06
    20f8:	8d 83       	std	Y+5, r24	; 0x05
    20fa:	0f c0       	rjmp	.+30     	; 0x211a <CLCD_voidInit+0xc6>
    20fc:	88 ec       	ldi	r24, 0xC8	; 200
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	9c 83       	std	Y+4, r25	; 0x04
    2102:	8b 83       	std	Y+3, r24	; 0x03
    2104:	8b 81       	ldd	r24, Y+3	; 0x03
    2106:	9c 81       	ldd	r25, Y+4	; 0x04
    2108:	01 97       	sbiw	r24, 0x01	; 1
    210a:	f1 f7       	brne	.-4      	; 0x2108 <CLCD_voidInit+0xb4>
    210c:	9c 83       	std	Y+4, r25	; 0x04
    210e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2110:	8d 81       	ldd	r24, Y+5	; 0x05
    2112:	9e 81       	ldd	r25, Y+6	; 0x06
    2114:	01 97       	sbiw	r24, 0x01	; 1
    2116:	9e 83       	std	Y+6, r25	; 0x06
    2118:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    211a:	8d 81       	ldd	r24, Y+5	; 0x05
    211c:	9e 81       	ldd	r25, Y+6	; 0x06
    211e:	00 97       	sbiw	r24, 0x00	; 0
    2120:	69 f7       	brne	.-38     	; 0x20fc <CLCD_voidInit+0xa8>
    2122:	14 c0       	rjmp	.+40     	; 0x214c <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2124:	6f 81       	ldd	r22, Y+7	; 0x07
    2126:	78 85       	ldd	r23, Y+8	; 0x08
    2128:	89 85       	ldd	r24, Y+9	; 0x09
    212a:	9a 85       	ldd	r25, Y+10	; 0x0a
    212c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2130:	dc 01       	movw	r26, r24
    2132:	cb 01       	movw	r24, r22
    2134:	9e 83       	std	Y+6, r25	; 0x06
    2136:	8d 83       	std	Y+5, r24	; 0x05
    2138:	8d 81       	ldd	r24, Y+5	; 0x05
    213a:	9e 81       	ldd	r25, Y+6	; 0x06
    213c:	9a 83       	std	Y+2, r25	; 0x02
    213e:	89 83       	std	Y+1, r24	; 0x01
    2140:	89 81       	ldd	r24, Y+1	; 0x01
    2142:	9a 81       	ldd	r25, Y+2	; 0x02
    2144:	01 97       	sbiw	r24, 0x01	; 1
    2146:	f1 f7       	brne	.-4      	; 0x2144 <CLCD_voidInit+0xf0>
    2148:	9a 83       	std	Y+2, r25	; 0x02
    214a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(40);

	CLCD_voidSendCommand (0b00111000);
    214c:	88 e3       	ldi	r24, 0x38	; 56
    214e:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <CLCD_voidSendCommand>
	CLCD_voidSendCommand (0b00001100);
    2152:	8c e0       	ldi	r24, 0x0C	; 12
    2154:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <CLCD_voidSendCommand>
	CLCD_voidSendCommand (1);
    2158:	81 e0       	ldi	r24, 0x01	; 1
    215a:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <CLCD_voidSendCommand>

}
    215e:	2e 96       	adiw	r28, 0x0e	; 14
    2160:	0f b6       	in	r0, 0x3f	; 63
    2162:	f8 94       	cli
    2164:	de bf       	out	0x3e, r29	; 62
    2166:	0f be       	out	0x3f, r0	; 63
    2168:	cd bf       	out	0x3d, r28	; 61
    216a:	cf 91       	pop	r28
    216c:	df 91       	pop	r29
    216e:	08 95       	ret

00002170 <CLCD_voidGoToXY>:
void CLCD_voidGoToXY (u8 Copy_u8XPos , u8 Copy_u8YPos)
{
    2170:	df 93       	push	r29
    2172:	cf 93       	push	r28
    2174:	00 d0       	rcall	.+0      	; 0x2176 <CLCD_voidGoToXY+0x6>
    2176:	0f 92       	push	r0
    2178:	cd b7       	in	r28, 0x3d	; 61
    217a:	de b7       	in	r29, 0x3e	; 62
    217c:	8a 83       	std	Y+2, r24	; 0x02
    217e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8DDRAMAddress;

	Local_u8DDRAMAddress=0x40*Copy_u8YPos+Copy_u8XPos;
    2180:	8b 81       	ldd	r24, Y+3	; 0x03
    2182:	88 2f       	mov	r24, r24
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	00 24       	eor	r0, r0
    2188:	96 95       	lsr	r25
    218a:	87 95       	ror	r24
    218c:	07 94       	ror	r0
    218e:	96 95       	lsr	r25
    2190:	87 95       	ror	r24
    2192:	07 94       	ror	r0
    2194:	98 2f       	mov	r25, r24
    2196:	80 2d       	mov	r24, r0
    2198:	98 2f       	mov	r25, r24
    219a:	8a 81       	ldd	r24, Y+2	; 0x02
    219c:	89 0f       	add	r24, r25
    219e:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSendCommand(Local_u8DDRAMAddress+(1<<7));
    21a0:	89 81       	ldd	r24, Y+1	; 0x01
    21a2:	80 58       	subi	r24, 0x80	; 128
    21a4:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <CLCD_voidSendCommand>

}
    21a8:	0f 90       	pop	r0
    21aa:	0f 90       	pop	r0
    21ac:	0f 90       	pop	r0
    21ae:	cf 91       	pop	r28
    21b0:	df 91       	pop	r29
    21b2:	08 95       	ret

000021b4 <CLCD_voidWriteSpecialCharacter>:
void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8Pattern,u8 Copy_u8PatternNumber,u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    21b4:	df 93       	push	r29
    21b6:	cf 93       	push	r28
    21b8:	cd b7       	in	r28, 0x3d	; 61
    21ba:	de b7       	in	r29, 0x3e	; 62
    21bc:	27 97       	sbiw	r28, 0x07	; 7
    21be:	0f b6       	in	r0, 0x3f	; 63
    21c0:	f8 94       	cli
    21c2:	de bf       	out	0x3e, r29	; 62
    21c4:	0f be       	out	0x3f, r0	; 63
    21c6:	cd bf       	out	0x3d, r28	; 61
    21c8:	9c 83       	std	Y+4, r25	; 0x04
    21ca:	8b 83       	std	Y+3, r24	; 0x03
    21cc:	6d 83       	std	Y+5, r22	; 0x05
    21ce:	4e 83       	std	Y+6, r20	; 0x06
    21d0:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress,Local_u8Counter;

	Local_u8CGRAMAddress=Copy_u8PatternNumber *8;
    21d2:	8d 81       	ldd	r24, Y+5	; 0x05
    21d4:	88 2f       	mov	r24, r24
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	88 0f       	add	r24, r24
    21da:	99 1f       	adc	r25, r25
    21dc:	88 0f       	add	r24, r24
    21de:	99 1f       	adc	r25, r25
    21e0:	88 0f       	add	r24, r24
    21e2:	99 1f       	adc	r25, r25
    21e4:	8a 83       	std	Y+2, r24	; 0x02

	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);
    21e6:	8a 81       	ldd	r24, Y+2	; 0x02
    21e8:	80 5c       	subi	r24, 0xC0	; 192
    21ea:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <CLCD_voidSendCommand>

	for(Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
    21ee:	19 82       	std	Y+1, r1	; 0x01
    21f0:	0e c0       	rjmp	.+28     	; 0x220e <CLCD_voidWriteSpecialCharacter+0x5a>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Counter]);
    21f2:	89 81       	ldd	r24, Y+1	; 0x01
    21f4:	28 2f       	mov	r18, r24
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	8b 81       	ldd	r24, Y+3	; 0x03
    21fa:	9c 81       	ldd	r25, Y+4	; 0x04
    21fc:	fc 01       	movw	r30, r24
    21fe:	e2 0f       	add	r30, r18
    2200:	f3 1f       	adc	r31, r19
    2202:	80 81       	ld	r24, Z
    2204:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <CLCD_voidSendData>

	Local_u8CGRAMAddress=Copy_u8PatternNumber *8;

	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);

	for(Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
    2208:	89 81       	ldd	r24, Y+1	; 0x01
    220a:	8f 5f       	subi	r24, 0xFF	; 255
    220c:	89 83       	std	Y+1, r24	; 0x01
    220e:	89 81       	ldd	r24, Y+1	; 0x01
    2210:	88 30       	cpi	r24, 0x08	; 8
    2212:	78 f3       	brcs	.-34     	; 0x21f2 <CLCD_voidWriteSpecialCharacter+0x3e>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Counter]);
	}
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    2214:	8e 81       	ldd	r24, Y+6	; 0x06
    2216:	6f 81       	ldd	r22, Y+7	; 0x07
    2218:	0e 94 b8 10 	call	0x2170	; 0x2170 <CLCD_voidGoToXY>
	CLCD_voidSendData(Copy_u8PatternNumber);
    221c:	8d 81       	ldd	r24, Y+5	; 0x05
    221e:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <CLCD_voidSendData>

}
    2222:	27 96       	adiw	r28, 0x07	; 7
    2224:	0f b6       	in	r0, 0x3f	; 63
    2226:	f8 94       	cli
    2228:	de bf       	out	0x3e, r29	; 62
    222a:	0f be       	out	0x3f, r0	; 63
    222c:	cd bf       	out	0x3d, r28	; 61
    222e:	cf 91       	pop	r28
    2230:	df 91       	pop	r29
    2232:	08 95       	ret

00002234 <CLCD_voidWriteString>:




void CLCD_voidWriteString(u8* Local_u8String)
{
    2234:	df 93       	push	r29
    2236:	cf 93       	push	r28
    2238:	00 d0       	rcall	.+0      	; 0x223a <CLCD_voidWriteString+0x6>
    223a:	0f 92       	push	r0
    223c:	cd b7       	in	r28, 0x3d	; 61
    223e:	de b7       	in	r29, 0x3e	; 62
    2240:	9b 83       	std	Y+3, r25	; 0x03
    2242:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Index = 0;
    2244:	19 82       	std	Y+1, r1	; 0x01
    2246:	0e c0       	rjmp	.+28     	; 0x2264 <CLCD_voidWriteString+0x30>
	while(Local_u8String[Local_u8Index] != '\0')
	{
		CLCD_voidSendData(Local_u8String[Local_u8Index]);
    2248:	89 81       	ldd	r24, Y+1	; 0x01
    224a:	28 2f       	mov	r18, r24
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	8a 81       	ldd	r24, Y+2	; 0x02
    2250:	9b 81       	ldd	r25, Y+3	; 0x03
    2252:	fc 01       	movw	r30, r24
    2254:	e2 0f       	add	r30, r18
    2256:	f3 1f       	adc	r31, r19
    2258:	80 81       	ld	r24, Z
    225a:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <CLCD_voidSendData>
		Local_u8Index++;
    225e:	89 81       	ldd	r24, Y+1	; 0x01
    2260:	8f 5f       	subi	r24, 0xFF	; 255
    2262:	89 83       	std	Y+1, r24	; 0x01


void CLCD_voidWriteString(u8* Local_u8String)
{
	u8 Local_u8Index = 0;
	while(Local_u8String[Local_u8Index] != '\0')
    2264:	89 81       	ldd	r24, Y+1	; 0x01
    2266:	28 2f       	mov	r18, r24
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	8a 81       	ldd	r24, Y+2	; 0x02
    226c:	9b 81       	ldd	r25, Y+3	; 0x03
    226e:	fc 01       	movw	r30, r24
    2270:	e2 0f       	add	r30, r18
    2272:	f3 1f       	adc	r31, r19
    2274:	80 81       	ld	r24, Z
    2276:	88 23       	and	r24, r24
    2278:	39 f7       	brne	.-50     	; 0x2248 <CLCD_voidWriteString+0x14>
	{
		CLCD_voidSendData(Local_u8String[Local_u8Index]);
		Local_u8Index++;
	}
}
    227a:	0f 90       	pop	r0
    227c:	0f 90       	pop	r0
    227e:	0f 90       	pop	r0
    2280:	cf 91       	pop	r28
    2282:	df 91       	pop	r29
    2284:	08 95       	ret

00002286 <ClCD_voidWriteInteger>:

void ClCD_voidWriteInteger(u16 Local_u16Number)
{
    2286:	df 93       	push	r29
    2288:	cf 93       	push	r28
    228a:	cd b7       	in	r28, 0x3d	; 61
    228c:	de b7       	in	r29, 0x3e	; 62
    228e:	67 97       	sbiw	r28, 0x17	; 23
    2290:	0f b6       	in	r0, 0x3f	; 63
    2292:	f8 94       	cli
    2294:	de bf       	out	0x3e, r29	; 62
    2296:	0f be       	out	0x3f, r0	; 63
    2298:	cd bf       	out	0x3d, r28	; 61
    229a:	9f 8b       	std	Y+23, r25	; 0x17
    229c:	8e 8b       	std	Y+22, r24	; 0x16
	u16 Local_u16NumberArr[10]={0};
    229e:	84 e1       	ldi	r24, 0x14	; 20
    22a0:	fe 01       	movw	r30, r28
    22a2:	32 96       	adiw	r30, 0x02	; 2
    22a4:	df 01       	movw	r26, r30
    22a6:	98 2f       	mov	r25, r24
    22a8:	1d 92       	st	X+, r1
    22aa:	9a 95       	dec	r25
    22ac:	e9 f7       	brne	.-6      	; 0x22a8 <ClCD_voidWriteInteger+0x22>
	u8 Local_u8Counter=0;
    22ae:	19 82       	std	Y+1, r1	; 0x01
	if(Local_u16Number==0)
    22b0:	8e 89       	ldd	r24, Y+22	; 0x16
    22b2:	9f 89       	ldd	r25, Y+23	; 0x17
    22b4:	00 97       	sbiw	r24, 0x00	; 0
    22b6:	49 f5       	brne	.+82     	; 0x230a <ClCD_voidWriteInteger+0x84>
	{
		CLCD_voidSendData('0');
    22b8:	80 e3       	ldi	r24, 0x30	; 48
    22ba:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <CLCD_voidSendData>
    22be:	41 c0       	rjmp	.+130    	; 0x2342 <ClCD_voidWriteInteger+0xbc>
		return;
	}
	while(Local_u16Number != 0)
	{
		Local_u16NumberArr[Local_u8Counter]=Local_u16Number%10+'0';
    22c0:	89 81       	ldd	r24, Y+1	; 0x01
    22c2:	e8 2f       	mov	r30, r24
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	8e 89       	ldd	r24, Y+22	; 0x16
    22c8:	9f 89       	ldd	r25, Y+23	; 0x17
    22ca:	2a e0       	ldi	r18, 0x0A	; 10
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	b9 01       	movw	r22, r18
    22d0:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <__udivmodhi4>
    22d4:	ac 01       	movw	r20, r24
    22d6:	40 5d       	subi	r20, 0xD0	; 208
    22d8:	5f 4f       	sbci	r21, 0xFF	; 255
    22da:	9f 01       	movw	r18, r30
    22dc:	22 0f       	add	r18, r18
    22de:	33 1f       	adc	r19, r19
    22e0:	ce 01       	movw	r24, r28
    22e2:	01 96       	adiw	r24, 0x01	; 1
    22e4:	82 0f       	add	r24, r18
    22e6:	93 1f       	adc	r25, r19
    22e8:	fc 01       	movw	r30, r24
    22ea:	31 96       	adiw	r30, 0x01	; 1
    22ec:	51 83       	std	Z+1, r21	; 0x01
    22ee:	40 83       	st	Z, r20
		Local_u16Number=Local_u16Number/10;
    22f0:	8e 89       	ldd	r24, Y+22	; 0x16
    22f2:	9f 89       	ldd	r25, Y+23	; 0x17
    22f4:	2a e0       	ldi	r18, 0x0A	; 10
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	b9 01       	movw	r22, r18
    22fa:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <__udivmodhi4>
    22fe:	cb 01       	movw	r24, r22
    2300:	9f 8b       	std	Y+23, r25	; 0x17
    2302:	8e 8b       	std	Y+22, r24	; 0x16
		Local_u8Counter++;
    2304:	89 81       	ldd	r24, Y+1	; 0x01
    2306:	8f 5f       	subi	r24, 0xFF	; 255
    2308:	89 83       	std	Y+1, r24	; 0x01
	if(Local_u16Number==0)
	{
		CLCD_voidSendData('0');
		return;
	}
	while(Local_u16Number != 0)
    230a:	8e 89       	ldd	r24, Y+22	; 0x16
    230c:	9f 89       	ldd	r25, Y+23	; 0x17
    230e:	00 97       	sbiw	r24, 0x00	; 0
    2310:	b9 f6       	brne	.-82     	; 0x22c0 <ClCD_voidWriteInteger+0x3a>
    2312:	14 c0       	rjmp	.+40     	; 0x233c <ClCD_voidWriteInteger+0xb6>
		Local_u16Number=Local_u16Number/10;
		Local_u8Counter++;
	}
	while(Local_u8Counter !=0)
	{
		CLCD_voidSendData(Local_u16NumberArr[Local_u8Counter-1]);
    2314:	89 81       	ldd	r24, Y+1	; 0x01
    2316:	88 2f       	mov	r24, r24
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	01 97       	sbiw	r24, 0x01	; 1
    231c:	9c 01       	movw	r18, r24
    231e:	22 0f       	add	r18, r18
    2320:	33 1f       	adc	r19, r19
    2322:	ce 01       	movw	r24, r28
    2324:	01 96       	adiw	r24, 0x01	; 1
    2326:	82 0f       	add	r24, r18
    2328:	93 1f       	adc	r25, r19
    232a:	fc 01       	movw	r30, r24
    232c:	31 96       	adiw	r30, 0x01	; 1
    232e:	80 81       	ld	r24, Z
    2330:	91 81       	ldd	r25, Z+1	; 0x01
    2332:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <CLCD_voidSendData>
		Local_u8Counter--;
    2336:	89 81       	ldd	r24, Y+1	; 0x01
    2338:	81 50       	subi	r24, 0x01	; 1
    233a:	89 83       	std	Y+1, r24	; 0x01
	{
		Local_u16NumberArr[Local_u8Counter]=Local_u16Number%10+'0';
		Local_u16Number=Local_u16Number/10;
		Local_u8Counter++;
	}
	while(Local_u8Counter !=0)
    233c:	89 81       	ldd	r24, Y+1	; 0x01
    233e:	88 23       	and	r24, r24
    2340:	49 f7       	brne	.-46     	; 0x2314 <ClCD_voidWriteInteger+0x8e>
	{
		CLCD_voidSendData(Local_u16NumberArr[Local_u8Counter-1]);
		Local_u8Counter--;
	}

}
    2342:	67 96       	adiw	r28, 0x17	; 23
    2344:	0f b6       	in	r0, 0x3f	; 63
    2346:	f8 94       	cli
    2348:	de bf       	out	0x3e, r29	; 62
    234a:	0f be       	out	0x3f, r0	; 63
    234c:	cd bf       	out	0x3d, r28	; 61
    234e:	cf 91       	pop	r28
    2350:	df 91       	pop	r29
    2352:	08 95       	ret

00002354 <Car_voidMotorAdjustSpeed>:
#include "../../MCAL/TIMER/TIMER_interface.h"
#include "../../MCAL/DIO/DIO_interface.h"
#include "util/delay.h"

void Car_voidMotorAdjustSpeed(u8 Copy_u8Speed)
{
    2354:	df 93       	push	r29
    2356:	cf 93       	push	r28
    2358:	00 d0       	rcall	.+0      	; 0x235a <Car_voidMotorAdjustSpeed+0x6>
    235a:	0f 92       	push	r0
    235c:	cd b7       	in	r28, 0x3d	; 61
    235e:	de b7       	in	r29, 0x3e	; 62
    2360:	8b 83       	std	Y+3, r24	; 0x03
	u16 Local_u16SpeedMapping = ((f32)Copy_u8Speed/MAX_SPEED)*(MAX_PERIOD);
    2362:	8b 81       	ldd	r24, Y+3	; 0x03
    2364:	88 2f       	mov	r24, r24
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	a0 e0       	ldi	r26, 0x00	; 0
    236a:	b0 e0       	ldi	r27, 0x00	; 0
    236c:	bc 01       	movw	r22, r24
    236e:	cd 01       	movw	r24, r26
    2370:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2374:	dc 01       	movw	r26, r24
    2376:	cb 01       	movw	r24, r22
    2378:	bc 01       	movw	r22, r24
    237a:	cd 01       	movw	r24, r26
    237c:	20 e0       	ldi	r18, 0x00	; 0
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	48 ec       	ldi	r20, 0xC8	; 200
    2382:	52 e4       	ldi	r21, 0x42	; 66
    2384:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2388:	dc 01       	movw	r26, r24
    238a:	cb 01       	movw	r24, r22
    238c:	bc 01       	movw	r22, r24
    238e:	cd 01       	movw	r24, r26
    2390:	20 e0       	ldi	r18, 0x00	; 0
    2392:	30 e4       	ldi	r19, 0x40	; 64
    2394:	4c e9       	ldi	r20, 0x9C	; 156
    2396:	56 e4       	ldi	r21, 0x46	; 70
    2398:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    239c:	dc 01       	movw	r26, r24
    239e:	cb 01       	movw	r24, r22
    23a0:	bc 01       	movw	r22, r24
    23a2:	cd 01       	movw	r24, r26
    23a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a8:	dc 01       	movw	r26, r24
    23aa:	cb 01       	movw	r24, r22
    23ac:	9a 83       	std	Y+2, r25	; 0x02
    23ae:	89 83       	std	Y+1, r24	; 0x01

	TIMER1_voidInt();
    23b0:	0e 94 1d 08 	call	0x103a	; 0x103a <TIMER1_voidInt>

	if (Copy_u8Speed == STOP_SPEED)
    23b4:	8b 81       	ldd	r24, Y+3	; 0x03
    23b6:	88 23       	and	r24, r24
    23b8:	19 f4       	brne	.+6      	; 0x23c0 <Car_voidMotorAdjustSpeed+0x6c>
	{
		TIMER1_voidStop();
    23ba:	0e 94 6d 08 	call	0x10da	; 0x10da <TIMER1_voidStop>
    23be:	0c c0       	rjmp	.+24     	; 0x23d8 <Car_voidMotorAdjustSpeed+0x84>
	}
	else if (Copy_u8Speed == MAX_SPEED)
    23c0:	8b 81       	ldd	r24, Y+3	; 0x03
    23c2:	84 36       	cpi	r24, 0x64	; 100
    23c4:	29 f4       	brne	.+10     	; 0x23d0 <Car_voidMotorAdjustSpeed+0x7c>
	{
		TIMER1_voidSetChannelACompValue(MAX_PERIOD);
    23c6:	80 e2       	ldi	r24, 0x20	; 32
    23c8:	9e e4       	ldi	r25, 0x4E	; 78
    23ca:	0e 94 7e 08 	call	0x10fc	; 0x10fc <TIMER1_voidSetChannelACompValue>
    23ce:	04 c0       	rjmp	.+8      	; 0x23d8 <Car_voidMotorAdjustSpeed+0x84>
	}
	else
	{
		TIMER1_voidSetChannelACompValue(Local_u16SpeedMapping);
    23d0:	89 81       	ldd	r24, Y+1	; 0x01
    23d2:	9a 81       	ldd	r25, Y+2	; 0x02
    23d4:	0e 94 7e 08 	call	0x10fc	; 0x10fc <TIMER1_voidSetChannelACompValue>
	}
}
    23d8:	0f 90       	pop	r0
    23da:	0f 90       	pop	r0
    23dc:	0f 90       	pop	r0
    23de:	cf 91       	pop	r28
    23e0:	df 91       	pop	r29
    23e2:	08 95       	ret

000023e4 <Car_voidMotorIncrementSpeed>:
void Car_voidMotorIncrementSpeed(void)
{
    23e4:	df 93       	push	r29
    23e6:	cf 93       	push	r28
    23e8:	cd b7       	in	r28, 0x3d	; 61
    23ea:	de b7       	in	r29, 0x3e	; 62
    23ec:	60 97       	sbiw	r28, 0x10	; 16
    23ee:	0f b6       	in	r0, 0x3f	; 63
    23f0:	f8 94       	cli
    23f2:	de bf       	out	0x3e, r29	; 62
    23f4:	0f be       	out	0x3f, r0	; 63
    23f6:	cd bf       	out	0x3d, r28	; 61
	u16 Speed = TIMER1_u16GetCompValue()+INCREMENT_DECREMENT;
    23f8:	0e 94 90 08 	call	0x1120	; 0x1120 <TIMER1_u16GetCompValue>
    23fc:	88 51       	subi	r24, 0x18	; 24
    23fe:	9c 4f       	sbci	r25, 0xFC	; 252
    2400:	98 8b       	std	Y+16, r25	; 0x10
    2402:	8f 87       	std	Y+15, r24	; 0x0f
	TIMER1_voidInt();
    2404:	0e 94 1d 08 	call	0x103a	; 0x103a <TIMER1_voidInt>
	if(Speed >= MAX_PERIOD)
    2408:	8f 85       	ldd	r24, Y+15	; 0x0f
    240a:	98 89       	ldd	r25, Y+16	; 0x10
    240c:	2e e4       	ldi	r18, 0x4E	; 78
    240e:	80 32       	cpi	r24, 0x20	; 32
    2410:	92 07       	cpc	r25, r18
    2412:	08 f4       	brcc	.+2      	; 0x2416 <Car_voidMotorIncrementSpeed+0x32>
    2414:	83 c0       	rjmp	.+262    	; 0x251c <Car_voidMotorIncrementSpeed+0x138>
	{
		Speed = MAX_PERIOD;
    2416:	80 e2       	ldi	r24, 0x20	; 32
    2418:	9e e4       	ldi	r25, 0x4E	; 78
    241a:	98 8b       	std	Y+16, r25	; 0x10
    241c:	8f 87       	std	Y+15, r24	; 0x0f
		TIMER1_voidSetChannelACompValue(MAX_PERIOD);
    241e:	80 e2       	ldi	r24, 0x20	; 32
    2420:	9e e4       	ldi	r25, 0x4E	; 78
    2422:	0e 94 7e 08 	call	0x10fc	; 0x10fc <TIMER1_voidSetChannelACompValue>
		CLCD_voidSendCommand(1);
    2426:	81 e0       	ldi	r24, 0x01	; 1
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <CLCD_voidSendCommand>
		CLCD_voidWriteString("FFF");
    242e:	80 e6       	ldi	r24, 0x60	; 96
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	0e 94 1a 11 	call	0x2234	; 0x2234 <CLCD_voidWriteString>
    2436:	80 e0       	ldi	r24, 0x00	; 0
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	aa e7       	ldi	r26, 0x7A	; 122
    243c:	b4 e4       	ldi	r27, 0x44	; 68
    243e:	8b 87       	std	Y+11, r24	; 0x0b
    2440:	9c 87       	std	Y+12, r25	; 0x0c
    2442:	ad 87       	std	Y+13, r26	; 0x0d
    2444:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2446:	6b 85       	ldd	r22, Y+11	; 0x0b
    2448:	7c 85       	ldd	r23, Y+12	; 0x0c
    244a:	8d 85       	ldd	r24, Y+13	; 0x0d
    244c:	9e 85       	ldd	r25, Y+14	; 0x0e
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	4a ef       	ldi	r20, 0xFA	; 250
    2454:	54 e4       	ldi	r21, 0x44	; 68
    2456:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    245a:	dc 01       	movw	r26, r24
    245c:	cb 01       	movw	r24, r22
    245e:	8f 83       	std	Y+7, r24	; 0x07
    2460:	98 87       	std	Y+8, r25	; 0x08
    2462:	a9 87       	std	Y+9, r26	; 0x09
    2464:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2466:	6f 81       	ldd	r22, Y+7	; 0x07
    2468:	78 85       	ldd	r23, Y+8	; 0x08
    246a:	89 85       	ldd	r24, Y+9	; 0x09
    246c:	9a 85       	ldd	r25, Y+10	; 0x0a
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	40 e8       	ldi	r20, 0x80	; 128
    2474:	5f e3       	ldi	r21, 0x3F	; 63
    2476:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    247a:	88 23       	and	r24, r24
    247c:	2c f4       	brge	.+10     	; 0x2488 <Car_voidMotorIncrementSpeed+0xa4>
		__ticks = 1;
    247e:	81 e0       	ldi	r24, 0x01	; 1
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	9e 83       	std	Y+6, r25	; 0x06
    2484:	8d 83       	std	Y+5, r24	; 0x05
    2486:	3f c0       	rjmp	.+126    	; 0x2506 <Car_voidMotorIncrementSpeed+0x122>
	else if (__tmp > 65535)
    2488:	6f 81       	ldd	r22, Y+7	; 0x07
    248a:	78 85       	ldd	r23, Y+8	; 0x08
    248c:	89 85       	ldd	r24, Y+9	; 0x09
    248e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2490:	20 e0       	ldi	r18, 0x00	; 0
    2492:	3f ef       	ldi	r19, 0xFF	; 255
    2494:	4f e7       	ldi	r20, 0x7F	; 127
    2496:	57 e4       	ldi	r21, 0x47	; 71
    2498:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    249c:	18 16       	cp	r1, r24
    249e:	4c f5       	brge	.+82     	; 0x24f2 <Car_voidMotorIncrementSpeed+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    24a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    24a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    24a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	40 e2       	ldi	r20, 0x20	; 32
    24ae:	51 e4       	ldi	r21, 0x41	; 65
    24b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b4:	dc 01       	movw	r26, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	bc 01       	movw	r22, r24
    24ba:	cd 01       	movw	r24, r26
    24bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c0:	dc 01       	movw	r26, r24
    24c2:	cb 01       	movw	r24, r22
    24c4:	9e 83       	std	Y+6, r25	; 0x06
    24c6:	8d 83       	std	Y+5, r24	; 0x05
    24c8:	0f c0       	rjmp	.+30     	; 0x24e8 <Car_voidMotorIncrementSpeed+0x104>
    24ca:	88 ec       	ldi	r24, 0xC8	; 200
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	9c 83       	std	Y+4, r25	; 0x04
    24d0:	8b 83       	std	Y+3, r24	; 0x03
    24d2:	8b 81       	ldd	r24, Y+3	; 0x03
    24d4:	9c 81       	ldd	r25, Y+4	; 0x04
    24d6:	01 97       	sbiw	r24, 0x01	; 1
    24d8:	f1 f7       	brne	.-4      	; 0x24d6 <Car_voidMotorIncrementSpeed+0xf2>
    24da:	9c 83       	std	Y+4, r25	; 0x04
    24dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24de:	8d 81       	ldd	r24, Y+5	; 0x05
    24e0:	9e 81       	ldd	r25, Y+6	; 0x06
    24e2:	01 97       	sbiw	r24, 0x01	; 1
    24e4:	9e 83       	std	Y+6, r25	; 0x06
    24e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24e8:	8d 81       	ldd	r24, Y+5	; 0x05
    24ea:	9e 81       	ldd	r25, Y+6	; 0x06
    24ec:	00 97       	sbiw	r24, 0x00	; 0
    24ee:	69 f7       	brne	.-38     	; 0x24ca <Car_voidMotorIncrementSpeed+0xe6>
    24f0:	19 c0       	rjmp	.+50     	; 0x2524 <Car_voidMotorIncrementSpeed+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24f2:	6f 81       	ldd	r22, Y+7	; 0x07
    24f4:	78 85       	ldd	r23, Y+8	; 0x08
    24f6:	89 85       	ldd	r24, Y+9	; 0x09
    24f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	9e 83       	std	Y+6, r25	; 0x06
    2504:	8d 83       	std	Y+5, r24	; 0x05
    2506:	8d 81       	ldd	r24, Y+5	; 0x05
    2508:	9e 81       	ldd	r25, Y+6	; 0x06
    250a:	9a 83       	std	Y+2, r25	; 0x02
    250c:	89 83       	std	Y+1, r24	; 0x01
    250e:	89 81       	ldd	r24, Y+1	; 0x01
    2510:	9a 81       	ldd	r25, Y+2	; 0x02
    2512:	01 97       	sbiw	r24, 0x01	; 1
    2514:	f1 f7       	brne	.-4      	; 0x2512 <Car_voidMotorIncrementSpeed+0x12e>
    2516:	9a 83       	std	Y+2, r25	; 0x02
    2518:	89 83       	std	Y+1, r24	; 0x01
    251a:	04 c0       	rjmp	.+8      	; 0x2524 <Car_voidMotorIncrementSpeed+0x140>
		_delay_ms(1000);
	}
	else
	{
		TIMER1_voidSetChannelACompValue(Speed);
    251c:	8f 85       	ldd	r24, Y+15	; 0x0f
    251e:	98 89       	ldd	r25, Y+16	; 0x10
    2520:	0e 94 7e 08 	call	0x10fc	; 0x10fc <TIMER1_voidSetChannelACompValue>
	}
}
    2524:	60 96       	adiw	r28, 0x10	; 16
    2526:	0f b6       	in	r0, 0x3f	; 63
    2528:	f8 94       	cli
    252a:	de bf       	out	0x3e, r29	; 62
    252c:	0f be       	out	0x3f, r0	; 63
    252e:	cd bf       	out	0x3d, r28	; 61
    2530:	cf 91       	pop	r28
    2532:	df 91       	pop	r29
    2534:	08 95       	ret

00002536 <Car_voidMotorDecrementSpeed>:
void Car_voidMotorDecrementSpeed(void)
{
    2536:	df 93       	push	r29
    2538:	cf 93       	push	r28
    253a:	00 d0       	rcall	.+0      	; 0x253c <Car_voidMotorDecrementSpeed+0x6>
    253c:	cd b7       	in	r28, 0x3d	; 61
    253e:	de b7       	in	r29, 0x3e	; 62
	s16 Speed = TIMER1_u16GetCompValue()-INCREMENT_DECREMENT;
    2540:	0e 94 90 08 	call	0x1120	; 0x1120 <TIMER1_u16GetCompValue>
    2544:	88 5e       	subi	r24, 0xE8	; 232
    2546:	93 40       	sbci	r25, 0x03	; 3
    2548:	9a 83       	std	Y+2, r25	; 0x02
    254a:	89 83       	std	Y+1, r24	; 0x01

	if(Speed<STOP_SPEED)
    254c:	89 81       	ldd	r24, Y+1	; 0x01
    254e:	9a 81       	ldd	r25, Y+2	; 0x02
    2550:	99 23       	and	r25, r25
    2552:	24 f4       	brge	.+8      	; 0x255c <Car_voidMotorDecrementSpeed+0x26>
	{
		Speed = STOP_SPEED;
    2554:	1a 82       	std	Y+2, r1	; 0x02
    2556:	19 82       	std	Y+1, r1	; 0x01
		TIMER1_voidStop();
    2558:	0e 94 6d 08 	call	0x10da	; 0x10da <TIMER1_voidStop>
	}
	TIMER1_voidSetChannelACompValue(Speed);
    255c:	89 81       	ldd	r24, Y+1	; 0x01
    255e:	9a 81       	ldd	r25, Y+2	; 0x02
    2560:	0e 94 7e 08 	call	0x10fc	; 0x10fc <TIMER1_voidSetChannelACompValue>
}
    2564:	0f 90       	pop	r0
    2566:	0f 90       	pop	r0
    2568:	cf 91       	pop	r28
    256a:	df 91       	pop	r29
    256c:	08 95       	ret

0000256e <Car_voidMotorStop>:
void Car_voidMotorStop(void)
{
    256e:	df 93       	push	r29
    2570:	cf 93       	push	r28
    2572:	cd b7       	in	r28, 0x3d	; 61
    2574:	de b7       	in	r29, 0x3e	; 62
	TIMER1_voidStop();
    2576:	0e 94 6d 08 	call	0x10da	; 0x10da <TIMER1_voidStop>
}
    257a:	cf 91       	pop	r28
    257c:	df 91       	pop	r29
    257e:	08 95       	ret

00002580 <LED_voidInit>:
void LED_voidInit()
{
    2580:	df 93       	push	r29
    2582:	cf 93       	push	r28
    2584:	cd b7       	in	r28, 0x3d	; 61
    2586:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(LED_FRONT_PORT,LED_FRONT_PIN,DIO_u8PIN_OUTPUT);
    2588:	81 e0       	ldi	r24, 0x01	; 1
    258a:	60 e0       	ldi	r22, 0x00	; 0
    258c:	41 e0       	ldi	r20, 0x01	; 1
    258e:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <DIO_u8SetPinDirection>

	DIO_u8SetPinDirection(LED_BACK_PORT,LED_BACK_PIN,DIO_u8PIN_OUTPUT);
    2592:	81 e0       	ldi	r24, 0x01	; 1
    2594:	61 e0       	ldi	r22, 0x01	; 1
    2596:	41 e0       	ldi	r20, 0x01	; 1
    2598:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <DIO_u8SetPinDirection>

	DIO_u8SetPinDirection(LED_RIGHT_PORT,LED_RIGHT_PIN,DIO_u8PIN_OUTPUT);
    259c:	81 e0       	ldi	r24, 0x01	; 1
    259e:	62 e0       	ldi	r22, 0x02	; 2
    25a0:	41 e0       	ldi	r20, 0x01	; 1
    25a2:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <DIO_u8SetPinDirection>

	DIO_u8SetPinDirection(LED_LEFT_PORT,LED_LEFT_PIN,DIO_u8PIN_OUTPUT);
    25a6:	81 e0       	ldi	r24, 0x01	; 1
    25a8:	63 e0       	ldi	r22, 0x03	; 3
    25aa:	41 e0       	ldi	r20, 0x01	; 1
    25ac:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <DIO_u8SetPinDirection>
}
    25b0:	cf 91       	pop	r28
    25b2:	df 91       	pop	r29
    25b4:	08 95       	ret

000025b6 <LED_voidRIGHT>:

void LED_voidRIGHT(u8 Copy_u8State)
{
    25b6:	df 93       	push	r29
    25b8:	cf 93       	push	r28
    25ba:	0f 92       	push	r0
    25bc:	cd b7       	in	r28, 0x3d	; 61
    25be:	de b7       	in	r29, 0x3e	; 62
    25c0:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8State == LED_ON)
    25c2:	89 81       	ldd	r24, Y+1	; 0x01
    25c4:	81 30       	cpi	r24, 0x01	; 1
    25c6:	31 f4       	brne	.+12     	; 0x25d4 <LED_voidRIGHT+0x1e>
	{
		DIO_u8SetPinValue(LED_RIGHT_PORT,LED_RIGHT_PIN,DIO_u8PIN_HIGH);
    25c8:	81 e0       	ldi	r24, 0x01	; 1
    25ca:	62 e0       	ldi	r22, 0x02	; 2
    25cc:	41 e0       	ldi	r20, 0x01	; 1
    25ce:	0e 94 3c 0c 	call	0x1878	; 0x1878 <DIO_u8SetPinValue>
    25d2:	08 c0       	rjmp	.+16     	; 0x25e4 <LED_voidRIGHT+0x2e>
	}
	else if(Copy_u8State == LED_OFF)
    25d4:	89 81       	ldd	r24, Y+1	; 0x01
    25d6:	88 23       	and	r24, r24
    25d8:	29 f4       	brne	.+10     	; 0x25e4 <LED_voidRIGHT+0x2e>
	{
		DIO_u8SetPinValue(LED_RIGHT_PORT,LED_RIGHT_PIN,DIO_u8PIN_LOW);
    25da:	81 e0       	ldi	r24, 0x01	; 1
    25dc:	62 e0       	ldi	r22, 0x02	; 2
    25de:	40 e0       	ldi	r20, 0x00	; 0
    25e0:	0e 94 3c 0c 	call	0x1878	; 0x1878 <DIO_u8SetPinValue>
	}
}
    25e4:	0f 90       	pop	r0
    25e6:	cf 91       	pop	r28
    25e8:	df 91       	pop	r29
    25ea:	08 95       	ret

000025ec <LED_voidLEFT>:
void LED_voidLEFT(u8 Copy_u8State)
{
    25ec:	df 93       	push	r29
    25ee:	cf 93       	push	r28
    25f0:	0f 92       	push	r0
    25f2:	cd b7       	in	r28, 0x3d	; 61
    25f4:	de b7       	in	r29, 0x3e	; 62
    25f6:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8State == LED_ON)
    25f8:	89 81       	ldd	r24, Y+1	; 0x01
    25fa:	81 30       	cpi	r24, 0x01	; 1
    25fc:	31 f4       	brne	.+12     	; 0x260a <LED_voidLEFT+0x1e>
	{
		DIO_u8SetPinValue(LED_LEFT_PORT,LED_LEFT_PIN,DIO_u8PIN_HIGH);
    25fe:	81 e0       	ldi	r24, 0x01	; 1
    2600:	63 e0       	ldi	r22, 0x03	; 3
    2602:	41 e0       	ldi	r20, 0x01	; 1
    2604:	0e 94 3c 0c 	call	0x1878	; 0x1878 <DIO_u8SetPinValue>
    2608:	08 c0       	rjmp	.+16     	; 0x261a <LED_voidLEFT+0x2e>
	}
	else if(Copy_u8State == LED_OFF)
    260a:	89 81       	ldd	r24, Y+1	; 0x01
    260c:	88 23       	and	r24, r24
    260e:	29 f4       	brne	.+10     	; 0x261a <LED_voidLEFT+0x2e>
	{
		DIO_u8SetPinValue(LED_LEFT_PORT,LED_LEFT_PIN,DIO_u8PIN_LOW);
    2610:	81 e0       	ldi	r24, 0x01	; 1
    2612:	63 e0       	ldi	r22, 0x03	; 3
    2614:	40 e0       	ldi	r20, 0x00	; 0
    2616:	0e 94 3c 0c 	call	0x1878	; 0x1878 <DIO_u8SetPinValue>
	}
}
    261a:	0f 90       	pop	r0
    261c:	cf 91       	pop	r28
    261e:	df 91       	pop	r29
    2620:	08 95       	ret

00002622 <LED_voidCloseTraffic>:
void LED_voidCloseTraffic(void)
{
    2622:	df 93       	push	r29
    2624:	cf 93       	push	r28
    2626:	cd b7       	in	r28, 0x3d	; 61
    2628:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(LED_RIGHT_PORT,LED_RIGHT_PIN,DIO_u8PIN_LOW);
    262a:	81 e0       	ldi	r24, 0x01	; 1
    262c:	62 e0       	ldi	r22, 0x02	; 2
    262e:	40 e0       	ldi	r20, 0x00	; 0
    2630:	0e 94 3c 0c 	call	0x1878	; 0x1878 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LED_LEFT_PORT,LED_LEFT_PIN,DIO_u8PIN_LOW);
    2634:	81 e0       	ldi	r24, 0x01	; 1
    2636:	63 e0       	ldi	r22, 0x03	; 3
    2638:	40 e0       	ldi	r20, 0x00	; 0
    263a:	0e 94 3c 0c 	call	0x1878	; 0x1878 <DIO_u8SetPinValue>
}
    263e:	cf 91       	pop	r28
    2640:	df 91       	pop	r29
    2642:	08 95       	ret

00002644 <LED_voidFRONT>:
void LED_voidFRONT(u8 Copy_u8State)
{
    2644:	df 93       	push	r29
    2646:	cf 93       	push	r28
    2648:	0f 92       	push	r0
    264a:	cd b7       	in	r28, 0x3d	; 61
    264c:	de b7       	in	r29, 0x3e	; 62
    264e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8State == LED_ON)
    2650:	89 81       	ldd	r24, Y+1	; 0x01
    2652:	81 30       	cpi	r24, 0x01	; 1
    2654:	31 f4       	brne	.+12     	; 0x2662 <LED_voidFRONT+0x1e>
	{
		DIO_u8SetPinValue(LED_LEFT_PORT,LED_FRONT_PIN,DIO_u8PIN_HIGH);
    2656:	81 e0       	ldi	r24, 0x01	; 1
    2658:	60 e0       	ldi	r22, 0x00	; 0
    265a:	41 e0       	ldi	r20, 0x01	; 1
    265c:	0e 94 3c 0c 	call	0x1878	; 0x1878 <DIO_u8SetPinValue>
    2660:	05 c0       	rjmp	.+10     	; 0x266c <LED_voidFRONT+0x28>
	}
	else
	{
		DIO_u8SetPinValue(LED_FRONT_PORT,LED_FRONT_PIN,DIO_u8PIN_LOW);
    2662:	81 e0       	ldi	r24, 0x01	; 1
    2664:	60 e0       	ldi	r22, 0x00	; 0
    2666:	40 e0       	ldi	r20, 0x00	; 0
    2668:	0e 94 3c 0c 	call	0x1878	; 0x1878 <DIO_u8SetPinValue>
	}
}
    266c:	0f 90       	pop	r0
    266e:	cf 91       	pop	r28
    2670:	df 91       	pop	r29
    2672:	08 95       	ret

00002674 <LED_voidBACK>:
void LED_voidBACK(u8 Copy_u8State)
{
    2674:	df 93       	push	r29
    2676:	cf 93       	push	r28
    2678:	0f 92       	push	r0
    267a:	cd b7       	in	r28, 0x3d	; 61
    267c:	de b7       	in	r29, 0x3e	; 62
    267e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8State == LED_ON)
    2680:	89 81       	ldd	r24, Y+1	; 0x01
    2682:	81 30       	cpi	r24, 0x01	; 1
    2684:	31 f4       	brne	.+12     	; 0x2692 <LED_voidBACK+0x1e>
	{
		DIO_u8SetPinValue(LED_BACK_PORT,LED_BACK_PIN,DIO_u8PIN_HIGH);
    2686:	81 e0       	ldi	r24, 0x01	; 1
    2688:	61 e0       	ldi	r22, 0x01	; 1
    268a:	41 e0       	ldi	r20, 0x01	; 1
    268c:	0e 94 3c 0c 	call	0x1878	; 0x1878 <DIO_u8SetPinValue>
    2690:	05 c0       	rjmp	.+10     	; 0x269c <LED_voidBACK+0x28>
	}
	else
	{
		DIO_u8SetPinValue(LED_BACK_PORT,LED_BACK_PIN,DIO_u8PIN_LOW);
    2692:	81 e0       	ldi	r24, 0x01	; 1
    2694:	61 e0       	ldi	r22, 0x01	; 1
    2696:	40 e0       	ldi	r20, 0x00	; 0
    2698:	0e 94 3c 0c 	call	0x1878	; 0x1878 <DIO_u8SetPinValue>
	}
}
    269c:	0f 90       	pop	r0
    269e:	cf 91       	pop	r28
    26a0:	df 91       	pop	r29
    26a2:	08 95       	ret

000026a4 <LED_voidControl>:

void LED_voidControl(u8 Copy_u8PIN,u8 Copy_u8State)
{
    26a4:	df 93       	push	r29
    26a6:	cf 93       	push	r28
    26a8:	00 d0       	rcall	.+0      	; 0x26aa <LED_voidControl+0x6>
    26aa:	cd b7       	in	r28, 0x3d	; 61
    26ac:	de b7       	in	r29, 0x3e	; 62
    26ae:	89 83       	std	Y+1, r24	; 0x01
    26b0:	6a 83       	std	Y+2, r22	; 0x02
	DIO_u8SetPinDirection(LED_CONTROL_PORT,Copy_u8PIN,DIO_u8PIN_OUTPUT);
    26b2:	81 e0       	ldi	r24, 0x01	; 1
    26b4:	69 81       	ldd	r22, Y+1	; 0x01
    26b6:	41 e0       	ldi	r20, 0x01	; 1
    26b8:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <DIO_u8SetPinDirection>

	if(Copy_u8State == LED_ON)
    26bc:	8a 81       	ldd	r24, Y+2	; 0x02
    26be:	81 30       	cpi	r24, 0x01	; 1
    26c0:	31 f4       	brne	.+12     	; 0x26ce <LED_voidControl+0x2a>
	{
		DIO_u8SetPinValue(LED_CONTROL_PORT,Copy_u8PIN,DIO_u8PIN_HIGH);
    26c2:	81 e0       	ldi	r24, 0x01	; 1
    26c4:	69 81       	ldd	r22, Y+1	; 0x01
    26c6:	41 e0       	ldi	r20, 0x01	; 1
    26c8:	0e 94 3c 0c 	call	0x1878	; 0x1878 <DIO_u8SetPinValue>
    26cc:	05 c0       	rjmp	.+10     	; 0x26d8 <LED_voidControl+0x34>
	}
	else
	{
		DIO_u8SetPinValue(LED_CONTROL_PORT,Copy_u8PIN,DIO_u8PIN_LOW);
    26ce:	81 e0       	ldi	r24, 0x01	; 1
    26d0:	69 81       	ldd	r22, Y+1	; 0x01
    26d2:	40 e0       	ldi	r20, 0x00	; 0
    26d4:	0e 94 3c 0c 	call	0x1878	; 0x1878 <DIO_u8SetPinValue>
	}
}
    26d8:	0f 90       	pop	r0
    26da:	0f 90       	pop	r0
    26dc:	cf 91       	pop	r28
    26de:	df 91       	pop	r29
    26e0:	08 95       	ret

000026e2 <main>:

void Toggling_voidTraffic(void);
void Error_voidCommand(void);

void main (void)
{
    26e2:	df 93       	push	r29
    26e4:	cf 93       	push	r28
    26e6:	cd b7       	in	r28, 0x3d	; 61
    26e8:	de b7       	in	r29, 0x3e	; 62
    26ea:	61 97       	sbiw	r28, 0x11	; 17
    26ec:	0f b6       	in	r0, 0x3f	; 63
    26ee:	f8 94       	cli
    26f0:	de bf       	out	0x3e, r29	; 62
    26f2:	0f be       	out	0x3f, r0	; 63
    26f4:	cd bf       	out	0x3d, r28	; 61
	volatile u8 Local_u8Id = 0 , Local_u8Command = 0 , Local_u8Data = 0;
    26f6:	19 82       	std	Y+1, r1	; 0x01
    26f8:	1a 82       	std	Y+2, r1	; 0x02
    26fa:	1b 82       	std	Y+3, r1	; 0x03
	volatile u8 Local_u8PressedKey = NO_PRESSED_KEY , i = 0 ,Local_u8State = 0, Display = 1;
    26fc:	8f ef       	ldi	r24, 0xFF	; 255
    26fe:	8c 83       	std	Y+4, r24	; 0x04
    2700:	1d 82       	std	Y+5, r1	; 0x05
    2702:	1e 82       	std	Y+6, r1	; 0x06
    2704:	81 e0       	ldi	r24, 0x01	; 1
    2706:	8f 83       	std	Y+7, r24	; 0x07
	volatile u8 RunFlag= 0, LedFrontFlag = 0, LedBackFlag = 0, CloseTrafficFlag = 0;
    2708:	18 86       	std	Y+8, r1	; 0x08
    270a:	19 86       	std	Y+9, r1	; 0x09
    270c:	1a 86       	std	Y+10, r1	; 0x0a
    270e:	1b 86       	std	Y+11, r1	; 0x0b

	PORT_voidInit();
    2710:	0e 94 a1 0a 	call	0x1542	; 0x1542 <PORT_voidInit>
	CLCD_voidInit();
    2714:	0e 94 2a 10 	call	0x2054	; 0x2054 <CLCD_voidInit>
	GIE_voidEnableGlobal();
    2718:	0e 94 c6 0a 	call	0x158c	; 0x158c <GIE_voidEnableGlobal>

	TIMER0_u8OverflowSetCallBack(&Toggling_voidTraffic);
    271c:	87 e3       	ldi	r24, 0x37	; 55
    271e:	95 e1       	ldi	r25, 0x15	; 21
    2720:	0e 94 45 07 	call	0xe8a	; 0xe8a <TIMER0_u8OverflowSetCallBack>
	TIMER2_u8OverflowSetCallBack(&Error_voidCommand);
    2724:	84 e4       	ldi	r24, 0x44	; 68
    2726:	95 e1       	ldi	r25, 0x15	; 21
    2728:	0e 94 c8 07 	call	0xf90	; 0xf90 <TIMER2_u8OverflowSetCallBack>
	while(1)
	{
		if(ErrorFlag == 0)
    272c:	80 91 c3 01 	lds	r24, 0x01C3
    2730:	88 23       	and	r24, r24
    2732:	09 f0       	breq	.+2      	; 0x2736 <main+0x54>
    2734:	6a c1       	rjmp	.+724    	; 0x2a0a <main+0x328>
		{
			Local_u8PressedKey = KPD_u8GetPressedKey();
    2736:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <KPD_u8GetPressedKey>
    273a:	8c 83       	std	Y+4, r24	; 0x04
			if(Local_u8State == 0 && Local_u8PressedKey != 'A')
    273c:	8e 81       	ldd	r24, Y+6	; 0x06
    273e:	88 23       	and	r24, r24
    2740:	01 f5       	brne	.+64     	; 0x2782 <main+0xa0>
    2742:	8c 81       	ldd	r24, Y+4	; 0x04
    2744:	81 34       	cpi	r24, 0x41	; 65
    2746:	e9 f0       	breq	.+58     	; 0x2782 <main+0xa0>
			{
				if(Display == 1)
    2748:	8f 81       	ldd	r24, Y+7	; 0x07
    274a:	81 30       	cpi	r24, 0x01	; 1
    274c:	29 f4       	brne	.+10     	; 0x2758 <main+0x76>
				{
					CLCD_voidWriteString("Enter Id");
    274e:	84 e6       	ldi	r24, 0x64	; 100
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	0e 94 1a 11 	call	0x2234	; 0x2234 <CLCD_voidWriteString>
					Display = 0;
    2756:	1f 82       	std	Y+7, r1	; 0x07
				}
				if(Local_u8PressedKey != NO_PRESSED_KEY)
    2758:	8c 81       	ldd	r24, Y+4	; 0x04
    275a:	8f 3f       	cpi	r24, 0xFF	; 255
    275c:	a1 f1       	breq	.+104    	; 0x27c6 <main+0xe4>
				{
					Local_u8Id =(Local_u8Id*10)+Local_u8PressedKey;
    275e:	89 81       	ldd	r24, Y+1	; 0x01
    2760:	88 2f       	mov	r24, r24
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	9c 01       	movw	r18, r24
    2766:	22 0f       	add	r18, r18
    2768:	33 1f       	adc	r19, r19
    276a:	c9 01       	movw	r24, r18
    276c:	88 0f       	add	r24, r24
    276e:	99 1f       	adc	r25, r25
    2770:	88 0f       	add	r24, r24
    2772:	99 1f       	adc	r25, r25
    2774:	82 0f       	add	r24, r18
    2776:	93 1f       	adc	r25, r19
    2778:	98 2f       	mov	r25, r24
    277a:	8c 81       	ldd	r24, Y+4	; 0x04
    277c:	89 0f       	add	r24, r25
    277e:	89 83       	std	Y+1, r24	; 0x01
    2780:	22 c0       	rjmp	.+68     	; 0x27c6 <main+0xe4>
				}
			}
			else if(Local_u8State == 1 && Local_u8PressedKey != 'A')
    2782:	8e 81       	ldd	r24, Y+6	; 0x06
    2784:	81 30       	cpi	r24, 0x01	; 1
    2786:	f9 f4       	brne	.+62     	; 0x27c6 <main+0xe4>
    2788:	8c 81       	ldd	r24, Y+4	; 0x04
    278a:	81 34       	cpi	r24, 0x41	; 65
    278c:	e1 f0       	breq	.+56     	; 0x27c6 <main+0xe4>
			{
				if(Display == 1)
    278e:	8f 81       	ldd	r24, Y+7	; 0x07
    2790:	81 30       	cpi	r24, 0x01	; 1
    2792:	29 f4       	brne	.+10     	; 0x279e <main+0xbc>
				{
					CLCD_voidWriteString("Enter Command");
    2794:	8d e6       	ldi	r24, 0x6D	; 109
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	0e 94 1a 11 	call	0x2234	; 0x2234 <CLCD_voidWriteString>
					Display = 0;
    279c:	1f 82       	std	Y+7, r1	; 0x07
				}
				if(Local_u8PressedKey != NO_PRESSED_KEY)
    279e:	8c 81       	ldd	r24, Y+4	; 0x04
    27a0:	8f 3f       	cpi	r24, 0xFF	; 255
    27a2:	89 f0       	breq	.+34     	; 0x27c6 <main+0xe4>
				{
					Local_u8Command =(Local_u8Command*10)+Local_u8PressedKey;
    27a4:	8a 81       	ldd	r24, Y+2	; 0x02
    27a6:	88 2f       	mov	r24, r24
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	9c 01       	movw	r18, r24
    27ac:	22 0f       	add	r18, r18
    27ae:	33 1f       	adc	r19, r19
    27b0:	c9 01       	movw	r24, r18
    27b2:	88 0f       	add	r24, r24
    27b4:	99 1f       	adc	r25, r25
    27b6:	88 0f       	add	r24, r24
    27b8:	99 1f       	adc	r25, r25
    27ba:	82 0f       	add	r24, r18
    27bc:	93 1f       	adc	r25, r19
    27be:	98 2f       	mov	r25, r24
    27c0:	8c 81       	ldd	r24, Y+4	; 0x04
    27c2:	89 0f       	add	r24, r25
    27c4:	8a 83       	std	Y+2, r24	; 0x02
				}
			}

			if(Local_u8PressedKey != NO_PRESSED_KEY && Local_u8PressedKey != 'A' && Local_u8Data <= 100)
    27c6:	8c 81       	ldd	r24, Y+4	; 0x04
    27c8:	8f 3f       	cpi	r24, 0xFF	; 255
    27ca:	39 f1       	breq	.+78     	; 0x281a <main+0x138>
    27cc:	8c 81       	ldd	r24, Y+4	; 0x04
    27ce:	81 34       	cpi	r24, 0x41	; 65
    27d0:	21 f1       	breq	.+72     	; 0x281a <main+0x138>
    27d2:	8b 81       	ldd	r24, Y+3	; 0x03
    27d4:	85 36       	cpi	r24, 0x65	; 101
    27d6:	08 f5       	brcc	.+66     	; 0x281a <main+0x138>
			{
				CLCD_voidGoToXY(i,1);
    27d8:	8d 81       	ldd	r24, Y+5	; 0x05
    27da:	61 e0       	ldi	r22, 0x01	; 1
    27dc:	0e 94 b8 10 	call	0x2170	; 0x2170 <CLCD_voidGoToXY>
				ClCD_voidWriteInteger(Local_u8PressedKey);
    27e0:	8c 81       	ldd	r24, Y+4	; 0x04
    27e2:	88 2f       	mov	r24, r24
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	0e 94 43 11 	call	0x2286	; 0x2286 <ClCD_voidWriteInteger>
				if(Local_u8State == 2)
    27ea:	8e 81       	ldd	r24, Y+6	; 0x06
    27ec:	82 30       	cpi	r24, 0x02	; 2
    27ee:	89 f4       	brne	.+34     	; 0x2812 <main+0x130>
				{
					Local_u8Data = (Local_u8Data * 10) + Local_u8PressedKey;
    27f0:	8b 81       	ldd	r24, Y+3	; 0x03
    27f2:	88 2f       	mov	r24, r24
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	9c 01       	movw	r18, r24
    27f8:	22 0f       	add	r18, r18
    27fa:	33 1f       	adc	r19, r19
    27fc:	c9 01       	movw	r24, r18
    27fe:	88 0f       	add	r24, r24
    2800:	99 1f       	adc	r25, r25
    2802:	88 0f       	add	r24, r24
    2804:	99 1f       	adc	r25, r25
    2806:	82 0f       	add	r24, r18
    2808:	93 1f       	adc	r25, r19
    280a:	98 2f       	mov	r25, r24
    280c:	8c 81       	ldd	r24, Y+4	; 0x04
    280e:	89 0f       	add	r24, r25
    2810:	8b 83       	std	Y+3, r24	; 0x03
				}
				i++;
    2812:	8d 81       	ldd	r24, Y+5	; 0x05
    2814:	8f 5f       	subi	r24, 0xFF	; 255
    2816:	8d 83       	std	Y+5, r24	; 0x05
    2818:	14 c0       	rjmp	.+40     	; 0x2842 <main+0x160>
			}
			else if(Local_u8PressedKey == 'A')
    281a:	8c 81       	ldd	r24, Y+4	; 0x04
    281c:	81 34       	cpi	r24, 0x41	; 65
    281e:	89 f4       	brne	.+34     	; 0x2842 <main+0x160>
			{
				Local_u8State++;
    2820:	8e 81       	ldd	r24, Y+6	; 0x06
    2822:	8f 5f       	subi	r24, 0xFF	; 255
    2824:	8e 83       	std	Y+6, r24	; 0x06
				if(Local_u8State > 2)
    2826:	8e 81       	ldd	r24, Y+6	; 0x06
    2828:	83 30       	cpi	r24, 0x03	; 3
    282a:	18 f0       	brcs	.+6      	; 0x2832 <main+0x150>
				{
					RunFlag = 1;
    282c:	81 e0       	ldi	r24, 0x01	; 1
    282e:	88 87       	std	Y+8, r24	; 0x08
					Local_u8State = 0;
    2830:	1e 82       	std	Y+6, r1	; 0x06
				}
				CLCD_voidSendCommand(CLR_DISPLAY);
    2832:	81 e0       	ldi	r24, 0x01	; 1
    2834:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <CLCD_voidSendCommand>
				i = 0;
    2838:	1d 82       	std	Y+5, r1	; 0x05
				Display = 1;
    283a:	81 e0       	ldi	r24, 0x01	; 1
    283c:	8f 83       	std	Y+7, r24	; 0x07
				Local_u8PressedKey = NO_PRESSED_KEY;
    283e:	8f ef       	ldi	r24, 0xFF	; 255
    2840:	8c 83       	std	Y+4, r24	; 0x04
			}
			if((Local_u8Command == ADJUST_SPEED || Local_u8Command == FRONT_LED || Local_u8Command == BACK_LED) && Local_u8State == 2)
    2842:	8a 81       	ldd	r24, Y+2	; 0x02
    2844:	83 30       	cpi	r24, 0x03	; 3
    2846:	31 f0       	breq	.+12     	; 0x2854 <main+0x172>
    2848:	8a 81       	ldd	r24, Y+2	; 0x02
    284a:	87 30       	cpi	r24, 0x07	; 7
    284c:	19 f0       	breq	.+6      	; 0x2854 <main+0x172>
    284e:	8a 81       	ldd	r24, Y+2	; 0x02
    2850:	88 30       	cpi	r24, 0x08	; 8
    2852:	81 f4       	brne	.+32     	; 0x2874 <main+0x192>
    2854:	8e 81       	ldd	r24, Y+6	; 0x06
    2856:	82 30       	cpi	r24, 0x02	; 2
    2858:	69 f4       	brne	.+26     	; 0x2874 <main+0x192>
			{
				if(Display == 1 && RunFlag !=1)
    285a:	8f 81       	ldd	r24, Y+7	; 0x07
    285c:	81 30       	cpi	r24, 0x01	; 1
    285e:	81 f4       	brne	.+32     	; 0x2880 <main+0x19e>
    2860:	88 85       	ldd	r24, Y+8	; 0x08
    2862:	81 30       	cpi	r24, 0x01	; 1
    2864:	69 f0       	breq	.+26     	; 0x2880 <main+0x19e>
				{
					CLCD_voidWriteString("Enter Data");
    2866:	8b e7       	ldi	r24, 0x7B	; 123
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	0e 94 1a 11 	call	0x2234	; 0x2234 <CLCD_voidWriteString>
					Local_u8Data = 0;
    286e:	1b 82       	std	Y+3, r1	; 0x03
					Display = 0;
    2870:	1f 82       	std	Y+7, r1	; 0x07
    2872:	06 c0       	rjmp	.+12     	; 0x2880 <main+0x19e>
				}
			}
			else if(Local_u8State ==2)
    2874:	8e 81       	ldd	r24, Y+6	; 0x06
    2876:	82 30       	cpi	r24, 0x02	; 2
    2878:	19 f4       	brne	.+6      	; 0x2880 <main+0x19e>
			{
				RunFlag = 1;
    287a:	81 e0       	ldi	r24, 0x01	; 1
    287c:	88 87       	std	Y+8, r24	; 0x08
				Local_u8State = 0;
    287e:	1e 82       	std	Y+6, r1	; 0x06
			}
			if(RunFlag == 1)
    2880:	88 85       	ldd	r24, Y+8	; 0x08
    2882:	81 30       	cpi	r24, 0x01	; 1
    2884:	09 f0       	breq	.+2      	; 0x2888 <main+0x1a6>
    2886:	c1 c0       	rjmp	.+386    	; 0x2a0a <main+0x328>
			{
				RunFlag = 0;
    2888:	18 86       	std	Y+8, r1	; 0x08
				switch(Local_u8Id)
    288a:	89 81       	ldd	r24, Y+1	; 0x01
    288c:	28 2f       	mov	r18, r24
    288e:	30 e0       	ldi	r19, 0x00	; 0
    2890:	39 8b       	std	Y+17, r19	; 0x11
    2892:	28 8b       	std	Y+16, r18	; 0x10
    2894:	88 89       	ldd	r24, Y+16	; 0x10
    2896:	99 89       	ldd	r25, Y+17	; 0x11
    2898:	82 30       	cpi	r24, 0x02	; 2
    289a:	91 05       	cpc	r25, r1
    289c:	09 f4       	brne	.+2      	; 0x28a0 <main+0x1be>
    289e:	4e c0       	rjmp	.+156    	; 0x293c <main+0x25a>
    28a0:	28 89       	ldd	r18, Y+16	; 0x10
    28a2:	39 89       	ldd	r19, Y+17	; 0x11
    28a4:	2f 3f       	cpi	r18, 0xFF	; 255
    28a6:	31 05       	cpc	r19, r1
    28a8:	09 f4       	brne	.+2      	; 0x28ac <main+0x1ca>
    28aa:	9f c0       	rjmp	.+318    	; 0x29ea <main+0x308>
    28ac:	88 89       	ldd	r24, Y+16	; 0x10
    28ae:	99 89       	ldd	r25, Y+17	; 0x11
    28b0:	81 30       	cpi	r24, 0x01	; 1
    28b2:	91 05       	cpc	r25, r1
    28b4:	09 f0       	breq	.+2      	; 0x28b8 <main+0x1d6>
    28b6:	9b c0       	rjmp	.+310    	; 0x29ee <main+0x30c>
				{

				case Motor :
					switch(Local_u8Command)
    28b8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ba:	28 2f       	mov	r18, r24
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	3f 87       	std	Y+15, r19	; 0x0f
    28c0:	2e 87       	std	Y+14, r18	; 0x0e
    28c2:	8e 85       	ldd	r24, Y+14	; 0x0e
    28c4:	9f 85       	ldd	r25, Y+15	; 0x0f
    28c6:	83 30       	cpi	r24, 0x03	; 3
    28c8:	91 05       	cpc	r25, r1
    28ca:	09 f1       	breq	.+66     	; 0x290e <main+0x22c>
    28cc:	2e 85       	ldd	r18, Y+14	; 0x0e
    28ce:	3f 85       	ldd	r19, Y+15	; 0x0f
    28d0:	24 30       	cpi	r18, 0x04	; 4
    28d2:	31 05       	cpc	r19, r1
    28d4:	5c f4       	brge	.+22     	; 0x28ec <main+0x20a>
    28d6:	8e 85       	ldd	r24, Y+14	; 0x0e
    28d8:	9f 85       	ldd	r25, Y+15	; 0x0f
    28da:	81 30       	cpi	r24, 0x01	; 1
    28dc:	91 05       	cpc	r25, r1
    28de:	89 f0       	breq	.+34     	; 0x2902 <main+0x220>
    28e0:	2e 85       	ldd	r18, Y+14	; 0x0e
    28e2:	3f 85       	ldd	r19, Y+15	; 0x0f
    28e4:	22 30       	cpi	r18, 0x02	; 2
    28e6:	31 05       	cpc	r19, r1
    28e8:	79 f0       	breq	.+30     	; 0x2908 <main+0x226>
    28ea:	1b c0       	rjmp	.+54     	; 0x2922 <main+0x240>
    28ec:	8e 85       	ldd	r24, Y+14	; 0x0e
    28ee:	9f 85       	ldd	r25, Y+15	; 0x0f
    28f0:	84 30       	cpi	r24, 0x04	; 4
    28f2:	91 05       	cpc	r25, r1
    28f4:	81 f0       	breq	.+32     	; 0x2916 <main+0x234>
    28f6:	2e 85       	ldd	r18, Y+14	; 0x0e
    28f8:	3f 85       	ldd	r19, Y+15	; 0x0f
    28fa:	2f 3f       	cpi	r18, 0xFF	; 255
    28fc:	31 05       	cpc	r19, r1
    28fe:	71 f0       	breq	.+28     	; 0x291c <main+0x23a>
    2900:	10 c0       	rjmp	.+32     	; 0x2922 <main+0x240>
					{
					case	INCREMENT_SPEED   : Car_voidMotorIncrementSpeed();break;
    2902:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <Car_voidMotorIncrementSpeed>
    2906:	7f c0       	rjmp	.+254    	; 0x2a06 <main+0x324>
					case	DECREMENT_SPEED   : Car_voidMotorDecrementSpeed();break;
    2908:	0e 94 9b 12 	call	0x2536	; 0x2536 <Car_voidMotorDecrementSpeed>
    290c:	7c c0       	rjmp	.+248    	; 0x2a06 <main+0x324>
					case	ADJUST_SPEED	  : Car_voidMotorAdjustSpeed(Local_u8Data);break;
    290e:	8b 81       	ldd	r24, Y+3	; 0x03
    2910:	0e 94 aa 11 	call	0x2354	; 0x2354 <Car_voidMotorAdjustSpeed>
    2914:	78 c0       	rjmp	.+240    	; 0x2a06 <main+0x324>
					case	MOTOR_STOP		  : Car_voidMotorStop();break;
    2916:	0e 94 b7 12 	call	0x256e	; 0x256e <Car_voidMotorStop>
    291a:	75 c0       	rjmp	.+234    	; 0x2a06 <main+0x324>
					case	NO_PRESSED_KEY	  : Local_u8State = 1;break;
    291c:	81 e0       	ldi	r24, 0x01	; 1
    291e:	8e 83       	std	Y+6, r24	; 0x06
    2920:	72 c0       	rjmp	.+228    	; 0x2a06 <main+0x324>
					default  :  				ErrorFlag = 1;
    2922:	81 e0       	ldi	r24, 0x01	; 1
    2924:	80 93 c3 01 	sts	0x01C3, r24
												CLCD_voidSendCommand(CLR_DISPLAY);
    2928:	81 e0       	ldi	r24, 0x01	; 1
    292a:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <CLCD_voidSendCommand>
												CLCD_voidWriteString("Error Command");
    292e:	86 e8       	ldi	r24, 0x86	; 134
    2930:	90 e0       	ldi	r25, 0x00	; 0
    2932:	0e 94 1a 11 	call	0x2234	; 0x2234 <CLCD_voidWriteString>
												TIMER2_voidInt(); break;
    2936:	0e 94 9a 07 	call	0xf34	; 0xf34 <TIMER2_voidInt>
    293a:	65 c0       	rjmp	.+202    	; 0x2a06 <main+0x324>
					}
					break;

					case Leds :
						switch(Local_u8Command)
    293c:	8a 81       	ldd	r24, Y+2	; 0x02
    293e:	28 2f       	mov	r18, r24
    2940:	30 e0       	ldi	r19, 0x00	; 0
    2942:	3d 87       	std	Y+13, r19	; 0x0d
    2944:	2c 87       	std	Y+12, r18	; 0x0c
    2946:	8c 85       	ldd	r24, Y+12	; 0x0c
    2948:	9d 85       	ldd	r25, Y+13	; 0x0d
    294a:	87 30       	cpi	r24, 0x07	; 7
    294c:	91 05       	cpc	r25, r1
    294e:	81 f1       	breq	.+96     	; 0x29b0 <main+0x2ce>
    2950:	2c 85       	ldd	r18, Y+12	; 0x0c
    2952:	3d 85       	ldd	r19, Y+13	; 0x0d
    2954:	28 30       	cpi	r18, 0x08	; 8
    2956:	31 05       	cpc	r19, r1
    2958:	5c f4       	brge	.+22     	; 0x2970 <main+0x28e>
    295a:	8c 85       	ldd	r24, Y+12	; 0x0c
    295c:	9d 85       	ldd	r25, Y+13	; 0x0d
    295e:	85 30       	cpi	r24, 0x05	; 5
    2960:	91 05       	cpc	r25, r1
    2962:	b1 f0       	breq	.+44     	; 0x2990 <main+0x2ae>
    2964:	2c 85       	ldd	r18, Y+12	; 0x0c
    2966:	3d 85       	ldd	r19, Y+13	; 0x0d
    2968:	26 30       	cpi	r18, 0x06	; 6
    296a:	31 05       	cpc	r19, r1
    296c:	c9 f0       	breq	.+50     	; 0x29a0 <main+0x2be>
    296e:	30 c0       	rjmp	.+96     	; 0x29d0 <main+0x2ee>
    2970:	8c 85       	ldd	r24, Y+12	; 0x0c
    2972:	9d 85       	ldd	r25, Y+13	; 0x0d
    2974:	89 30       	cpi	r24, 0x09	; 9
    2976:	91 05       	cpc	r25, r1
    2978:	09 f1       	breq	.+66     	; 0x29bc <main+0x2da>
    297a:	2c 85       	ldd	r18, Y+12	; 0x0c
    297c:	3d 85       	ldd	r19, Y+13	; 0x0d
    297e:	29 30       	cpi	r18, 0x09	; 9
    2980:	31 05       	cpc	r19, r1
    2982:	cc f0       	brlt	.+50     	; 0x29b6 <main+0x2d4>
    2984:	8c 85       	ldd	r24, Y+12	; 0x0c
    2986:	9d 85       	ldd	r25, Y+13	; 0x0d
    2988:	8f 3f       	cpi	r24, 0xFF	; 255
    298a:	91 05       	cpc	r25, r1
    298c:	f1 f0       	breq	.+60     	; 0x29ca <main+0x2e8>
    298e:	20 c0       	rjmp	.+64     	; 0x29d0 <main+0x2ee>
						{
						case	RIGHT_TRAFFIC  	  :	LedRightFlag = 1; LedLeftFlag = 0; TIMER0_voidInt();break;
    2990:	81 e0       	ldi	r24, 0x01	; 1
    2992:	80 93 c4 01 	sts	0x01C4, r24
    2996:	10 92 c5 01 	sts	0x01C5, r1
    299a:	0e 94 17 07 	call	0xe2e	; 0xe2e <TIMER0_voidInt>
    299e:	33 c0       	rjmp	.+102    	; 0x2a06 <main+0x324>
						case	LEFT_TRAFFIC	  : LedRightFlag = 0; LedLeftFlag = 1; TIMER0_voidInt();break;
    29a0:	10 92 c4 01 	sts	0x01C4, r1
    29a4:	81 e0       	ldi	r24, 0x01	; 1
    29a6:	80 93 c5 01 	sts	0x01C5, r24
    29aa:	0e 94 17 07 	call	0xe2e	; 0xe2e <TIMER0_voidInt>
    29ae:	2b c0       	rjmp	.+86     	; 0x2a06 <main+0x324>
						case	FRONT_LED		  : LedFrontFlag = 1; break;
    29b0:	81 e0       	ldi	r24, 0x01	; 1
    29b2:	89 87       	std	Y+9, r24	; 0x09
    29b4:	28 c0       	rjmp	.+80     	; 0x2a06 <main+0x324>
						case	BACK_LED		  : LedBackFlag = 1; break;
    29b6:	81 e0       	ldi	r24, 0x01	; 1
    29b8:	8a 87       	std	Y+10, r24	; 0x0a
    29ba:	25 c0       	rjmp	.+74     	; 0x2a06 <main+0x324>
						case  	CLOSE_TRAFFIC	  : LedRightFlag = 0; LedLeftFlag = 0; CloseTrafficFlag = 1; break;
    29bc:	10 92 c4 01 	sts	0x01C4, r1
    29c0:	10 92 c5 01 	sts	0x01C5, r1
    29c4:	81 e0       	ldi	r24, 0x01	; 1
    29c6:	8b 87       	std	Y+11, r24	; 0x0b
    29c8:	1e c0       	rjmp	.+60     	; 0x2a06 <main+0x324>
						case	NO_PRESSED_KEY	  : Local_u8State = 1;break;
    29ca:	81 e0       	ldi	r24, 0x01	; 1
    29cc:	8e 83       	std	Y+6, r24	; 0x06
    29ce:	1b c0       	rjmp	.+54     	; 0x2a06 <main+0x324>
						default		: 				ErrorFlag = 1;
    29d0:	81 e0       	ldi	r24, 0x01	; 1
    29d2:	80 93 c3 01 	sts	0x01C3, r24
													CLCD_voidSendCommand(CLR_DISPLAY);
    29d6:	81 e0       	ldi	r24, 0x01	; 1
    29d8:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <CLCD_voidSendCommand>
													CLCD_voidWriteString("Error Command");
    29dc:	86 e8       	ldi	r24, 0x86	; 134
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	0e 94 1a 11 	call	0x2234	; 0x2234 <CLCD_voidWriteString>
													TIMER2_voidInt();break;
    29e4:	0e 94 9a 07 	call	0xf34	; 0xf34 <TIMER2_voidInt>
    29e8:	0e c0       	rjmp	.+28     	; 0x2a06 <main+0x324>
						}
					break;
					case	NO_PRESSED_KEY	  : Local_u8State = 0; break;
    29ea:	1e 82       	std	Y+6, r1	; 0x06
    29ec:	0c c0       	rjmp	.+24     	; 0x2a06 <main+0x324>

					default	:					ErrorFlag = 1;
    29ee:	81 e0       	ldi	r24, 0x01	; 1
    29f0:	80 93 c3 01 	sts	0x01C3, r24
												CLCD_voidSendCommand(CLR_DISPLAY);
    29f4:	81 e0       	ldi	r24, 0x01	; 1
    29f6:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <CLCD_voidSendCommand>
												CLCD_voidWriteString("Error ID");
    29fa:	84 e9       	ldi	r24, 0x94	; 148
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	0e 94 1a 11 	call	0x2234	; 0x2234 <CLCD_voidWriteString>
												TIMER2_voidInt(); break;
    2a02:	0e 94 9a 07 	call	0xf34	; 0xf34 <TIMER2_voidInt>
				}
				Local_u8Id = 0;
    2a06:	19 82       	std	Y+1, r1	; 0x01
				Local_u8Command = 0;
    2a08:	1a 82       	std	Y+2, r1	; 0x02
			}
		}

		if(LedRightFlag == 1)
    2a0a:	80 91 c4 01 	lds	r24, 0x01C4
    2a0e:	81 30       	cpi	r24, 0x01	; 1
    2a10:	39 f4       	brne	.+14     	; 0x2a20 <main+0x33e>
		{
			LED_voidCloseTraffic();
    2a12:	0e 94 11 13 	call	0x2622	; 0x2622 <LED_voidCloseTraffic>
			LED_voidRIGHT(Led_State);
    2a16:	80 91 a5 01 	lds	r24, 0x01A5
    2a1a:	0e 94 db 12 	call	0x25b6	; 0x25b6 <LED_voidRIGHT>
    2a1e:	17 c0       	rjmp	.+46     	; 0x2a4e <main+0x36c>
		}
		else if(LedLeftFlag == 1)
    2a20:	80 91 c5 01 	lds	r24, 0x01C5
    2a24:	81 30       	cpi	r24, 0x01	; 1
    2a26:	39 f4       	brne	.+14     	; 0x2a36 <main+0x354>
		{
			LED_voidCloseTraffic();
    2a28:	0e 94 11 13 	call	0x2622	; 0x2622 <LED_voidCloseTraffic>
			LED_voidLEFT(Led_State);
    2a2c:	80 91 a5 01 	lds	r24, 0x01A5
    2a30:	0e 94 f6 12 	call	0x25ec	; 0x25ec <LED_voidLEFT>
    2a34:	0c c0       	rjmp	.+24     	; 0x2a4e <main+0x36c>
		}
		else if(CloseTrafficFlag ==1)
    2a36:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a38:	81 30       	cpi	r24, 0x01	; 1
    2a3a:	49 f4       	brne	.+18     	; 0x2a4e <main+0x36c>
		{
			LED_voidCloseTraffic();
    2a3c:	0e 94 11 13 	call	0x2622	; 0x2622 <LED_voidCloseTraffic>
			CloseTrafficFlag = 0;
    2a40:	1b 86       	std	Y+11, r1	; 0x0b
			LedRightFlag = 0;
    2a42:	10 92 c4 01 	sts	0x01C4, r1
			LedLeftFlag = 0;
    2a46:	10 92 c5 01 	sts	0x01C5, r1
			TIMER0_voidStopTimer0();
    2a4a:	0e 94 8d 07 	call	0xf1a	; 0xf1a <TIMER0_voidStopTimer0>
		}
		if(LedFrontFlag == 1)
    2a4e:	89 85       	ldd	r24, Y+9	; 0x09
    2a50:	81 30       	cpi	r24, 0x01	; 1
    2a52:	21 f4       	brne	.+8      	; 0x2a5c <main+0x37a>
		{
			LED_voidFRONT(Local_u8Data);
    2a54:	8b 81       	ldd	r24, Y+3	; 0x03
    2a56:	0e 94 22 13 	call	0x2644	; 0x2644 <LED_voidFRONT>
			LedFrontFlag = 0;
    2a5a:	19 86       	std	Y+9, r1	; 0x09
		}
		if(LedBackFlag == 1)
    2a5c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a5e:	81 30       	cpi	r24, 0x01	; 1
    2a60:	09 f0       	breq	.+2      	; 0x2a64 <main+0x382>
    2a62:	64 ce       	rjmp	.-824    	; 0x272c <main+0x4a>
		{
			LED_voidBACK(Local_u8Data);
    2a64:	8b 81       	ldd	r24, Y+3	; 0x03
    2a66:	0e 94 3a 13 	call	0x2674	; 0x2674 <LED_voidBACK>
			LedBackFlag = 0 ;
    2a6a:	1a 86       	std	Y+10, r1	; 0x0a
    2a6c:	5f ce       	rjmp	.-834    	; 0x272c <main+0x4a>

00002a6e <Toggling_voidTraffic>:
		}

	}
}
void Toggling_voidTraffic(void)
{
    2a6e:	df 93       	push	r29
    2a70:	cf 93       	push	r28
    2a72:	cd b7       	in	r28, 0x3d	; 61
    2a74:	de b7       	in	r29, 0x3e	; 62
	TOGGLE_BIT(Led_State,0);
    2a76:	80 91 a5 01 	lds	r24, 0x01A5
    2a7a:	91 e0       	ldi	r25, 0x01	; 1
    2a7c:	89 27       	eor	r24, r25
    2a7e:	80 93 a5 01 	sts	0x01A5, r24
}
    2a82:	cf 91       	pop	r28
    2a84:	df 91       	pop	r29
    2a86:	08 95       	ret

00002a88 <Error_voidCommand>:
void Error_voidCommand(void)
{
    2a88:	df 93       	push	r29
    2a8a:	cf 93       	push	r28
    2a8c:	cd b7       	in	r28, 0x3d	; 61
    2a8e:	de b7       	in	r29, 0x3e	; 62
	ErrorFlag = 0;
    2a90:	10 92 c3 01 	sts	0x01C3, r1
	CLCD_voidSendCommand(CLR_DISPLAY);
    2a94:	81 e0       	ldi	r24, 0x01	; 1
    2a96:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <CLCD_voidSendCommand>
	TIMER2_voidStopTimer2();
    2a9a:	0e 94 10 08 	call	0x1020	; 0x1020 <TIMER2_voidStopTimer2>
}
    2a9e:	cf 91       	pop	r28
    2aa0:	df 91       	pop	r29
    2aa2:	08 95       	ret

00002aa4 <__udivmodhi4>:
    2aa4:	aa 1b       	sub	r26, r26
    2aa6:	bb 1b       	sub	r27, r27
    2aa8:	51 e1       	ldi	r21, 0x11	; 17
    2aaa:	07 c0       	rjmp	.+14     	; 0x2aba <__udivmodhi4_ep>

00002aac <__udivmodhi4_loop>:
    2aac:	aa 1f       	adc	r26, r26
    2aae:	bb 1f       	adc	r27, r27
    2ab0:	a6 17       	cp	r26, r22
    2ab2:	b7 07       	cpc	r27, r23
    2ab4:	10 f0       	brcs	.+4      	; 0x2aba <__udivmodhi4_ep>
    2ab6:	a6 1b       	sub	r26, r22
    2ab8:	b7 0b       	sbc	r27, r23

00002aba <__udivmodhi4_ep>:
    2aba:	88 1f       	adc	r24, r24
    2abc:	99 1f       	adc	r25, r25
    2abe:	5a 95       	dec	r21
    2ac0:	a9 f7       	brne	.-22     	; 0x2aac <__udivmodhi4_loop>
    2ac2:	80 95       	com	r24
    2ac4:	90 95       	com	r25
    2ac6:	bc 01       	movw	r22, r24
    2ac8:	cd 01       	movw	r24, r26
    2aca:	08 95       	ret

00002acc <__prologue_saves__>:
    2acc:	2f 92       	push	r2
    2ace:	3f 92       	push	r3
    2ad0:	4f 92       	push	r4
    2ad2:	5f 92       	push	r5
    2ad4:	6f 92       	push	r6
    2ad6:	7f 92       	push	r7
    2ad8:	8f 92       	push	r8
    2ada:	9f 92       	push	r9
    2adc:	af 92       	push	r10
    2ade:	bf 92       	push	r11
    2ae0:	cf 92       	push	r12
    2ae2:	df 92       	push	r13
    2ae4:	ef 92       	push	r14
    2ae6:	ff 92       	push	r15
    2ae8:	0f 93       	push	r16
    2aea:	1f 93       	push	r17
    2aec:	cf 93       	push	r28
    2aee:	df 93       	push	r29
    2af0:	cd b7       	in	r28, 0x3d	; 61
    2af2:	de b7       	in	r29, 0x3e	; 62
    2af4:	ca 1b       	sub	r28, r26
    2af6:	db 0b       	sbc	r29, r27
    2af8:	0f b6       	in	r0, 0x3f	; 63
    2afa:	f8 94       	cli
    2afc:	de bf       	out	0x3e, r29	; 62
    2afe:	0f be       	out	0x3f, r0	; 63
    2b00:	cd bf       	out	0x3d, r28	; 61
    2b02:	09 94       	ijmp

00002b04 <__epilogue_restores__>:
    2b04:	2a 88       	ldd	r2, Y+18	; 0x12
    2b06:	39 88       	ldd	r3, Y+17	; 0x11
    2b08:	48 88       	ldd	r4, Y+16	; 0x10
    2b0a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b0c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b0e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b10:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b12:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b14:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b16:	b9 84       	ldd	r11, Y+9	; 0x09
    2b18:	c8 84       	ldd	r12, Y+8	; 0x08
    2b1a:	df 80       	ldd	r13, Y+7	; 0x07
    2b1c:	ee 80       	ldd	r14, Y+6	; 0x06
    2b1e:	fd 80       	ldd	r15, Y+5	; 0x05
    2b20:	0c 81       	ldd	r16, Y+4	; 0x04
    2b22:	1b 81       	ldd	r17, Y+3	; 0x03
    2b24:	aa 81       	ldd	r26, Y+2	; 0x02
    2b26:	b9 81       	ldd	r27, Y+1	; 0x01
    2b28:	ce 0f       	add	r28, r30
    2b2a:	d1 1d       	adc	r29, r1
    2b2c:	0f b6       	in	r0, 0x3f	; 63
    2b2e:	f8 94       	cli
    2b30:	de bf       	out	0x3e, r29	; 62
    2b32:	0f be       	out	0x3f, r0	; 63
    2b34:	cd bf       	out	0x3d, r28	; 61
    2b36:	ed 01       	movw	r28, r26
    2b38:	08 95       	ret

00002b3a <_exit>:
    2b3a:	f8 94       	cli

00002b3c <__stop_program>:
    2b3c:	ff cf       	rjmp	.-2      	; 0x2b3c <__stop_program>
